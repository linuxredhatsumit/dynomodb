app_user@KBUTEC81L20293:~$ helm search repo otel-integration/otel-integration --versions
NAME                                    CHART VERSION   APP VERSION     DESCRIPTION
otel-integration/otel-integration       0.0.220                         OpenTelemetry Integration
otel-integration/otel-integration       0.0.219                         OpenTelemetry Integration
otel-integration/otel-integration       0.0.218                         OpenTelemetry Integration
app_user@KBUTEC81L20293:~$



below is pipeline

trigger: none

parameters:
  - name: environment
    displayName: Select Environment
    type: string
    default: nonprod
    values:
      - nonprod
      - prod

  - name: otel_version
    displayName: OTEL Chart Version
    type: string
    default: "0.0.218"

variables:
  # Pools
  NONPROD_POOL_NAME: "K811-DevOps"
  PROD_POOL_NAME: "k811-prod"

  # AWS Account & Role
  NONPROD_AWS_ACCOUNT_ID: "483584640083"
  PROD_AWS_ACCOUNT_ID: "718378052708"
  UAT_ROLE_NAME: "EKS_Setup_Role"
  PROD_ROLE_NAME: "EKS-Setup-Role-Kotak811"

  # Helm S3 Buckets (no trailing slash)
  NONPROD_HELM_BUCKET: "s3://kotak811-helmcharts/others/coralogix"
  PROD_HELM_BUCKET: "s3://k811-onb-helmcharts/others/coralogix"

  # Base repo URL (vendor repo)
  BASE_HELM_REPO_NAME: "coralogix"
  BASE_HELM_REPO_URL: "https://cgx.jfrog.io/artifactory/coralogix-charts-virtual"

  # Service
  SERVICE_NAME: "otel-integration"
  AWS_REGION: "ap-south-1"

stages:
  - stage: PackageAndPush
    displayName: "Package & Push OTEL Helm Chart"
    jobs:
      - job: HelmPush
        pool:
          ${{ if eq(parameters.environment, 'prod') }}:
            name: $(PROD_POOL_NAME)
          ${{ if ne(parameters.environment, 'prod') }}:
            name: $(NONPROD_POOL_NAME)
        steps:
          - checkout: self

          - script: |
              echo "Assume Role for environment: ${{ parameters.environment }}"
              unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID

              if [ "${{ parameters.environment }}" == "prod" ]; then
                AWS_ACCOUNT_ID=$(PROD_AWS_ACCOUNT_ID)
                ROLE_NAME=$(PROD_ROLE_NAME)
                HELM_BUCKET=$(PROD_HELM_BUCKET)
              else
                AWS_ACCOUNT_ID=$(NONPROD_AWS_ACCOUNT_ID)
                ROLE_NAME=$(UAT_ROLE_NAME)
                HELM_BUCKET=$(NONPROD_HELM_BUCKET)
              fi

              # Ensure no trailing slash
              HELM_BUCKET=$(echo $HELM_BUCKET | sed 's:/*$::')

              # Assume AWS Role
              CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/$ROLE_NAME --role-session-name ${BUILD_BUILDID})
              export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')
              export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
              export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')

              # Add base Helm repo
              helm repo add $(BASE_HELM_REPO_NAME) $(BASE_HELM_REPO_URL)
              helm repo update

              # Create temp folder
              TMPDIR=$(mktemp -d)
              cd $TMPDIR

              echo "Pull OTEL chart version ${{ parameters.otel_version }} from base repo"
              helm pull $(BASE_HELM_REPO_NAME)/otel-integration --version ${{ parameters.otel_version }}

              # Download existing index.yaml or create empty if missing
              aws s3 cp $HELM_BUCKET/index.yaml index.yaml || echo -e "apiVersion: v1\nentries: {}" > index.yaml

              # Check if version already exists
              if grep -q "${{ parameters.otel_version }}" index.yaml; then
                echo "Chart version ${{ parameters.otel_version }} already exists in $HELM_BUCKET. Skipping push."
                exit 0
              fi

              # Generate merged index.yaml including old versions
              echo "Generating merged index.yaml"
              helm repo index . --url $HELM_BUCKET/ --merge index.yaml

              # Upload chart and merged index.yaml to S3
              aws s3 cp otel-integration-${{ parameters.otel_version }}.tgz $HELM_BUCKET/
              aws s3 cp index.yaml $HELM_BUCKET/ --content-type "application/x-yaml"

              echo "Done. Chart version ${{ parameters.otel_version }} pushed to $HELM_BUCKET"

              # List all versions in index.yaml for confirmation
              echo "Available chart versions in index.yaml:"
              grep -E 'version:' index.yaml
            displayName: "Package and Push OTEL Chart"
