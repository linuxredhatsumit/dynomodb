parameters:
  - name: DeployPROD
    type: boolean
    default: true
  - name: ImageTag
    type: string
    default: ''

jobs:
- ${{ if eq(parameters.DeployPROD, true) }}:
  - job: PREP_PROD_IMAGE
    displayName: "PROD: Update Chart Metadata & Promote Docker Image"
    pool:
      name: $(DEVOPS_POOL_NAME)
    steps:
      - checkout: self

      - script: |
          echo "Updating Chart version and image tag for PROD"
          VERSION_TAG="1.$(Build.BuildNumber)"
          echo "Setting chart version to $VERSION_TAG"
          sed -i -e "s/^version:.*/version: $VERSION_TAG/" $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e "s/^appVersion:.*/appVersion: $VERSION_TAG/" $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e "s/^name:.*/name: $(SERVICE_NAME)/" $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e "s/^  tag:.*/  tag: '${{ parameters.ImageTag }}'/" $(HELM_CHARTS_PATH)/prod-values.yaml
        displayName: "PROD: Update Helm Chart Metadata"

      - script: |
          echo "Assuming UAT role to access UAT ECR"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(SOURCE_AWS_ACCOUNT_ID):role/$(SOURCE_ROLE_NAME) \
            --role-session-name "UAT-Access-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          echo "Logging into UAT ECR"
          aws ecr get-login-password --region $(SOURCE_AWS_REGION) | docker login --username AWS --password-stdin $(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.$(SOURCE_AWS_REGION).amazonaws.com

          echo "Pulling image from UAT ECR"
          SRC_IMG=$(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.$(SOURCE_AWS_REGION).amazonaws.com/$(SOURCE_ECR_FOLDER_NAME)/$(SOURCE_ECR_REPO_NAME):${{ parameters.ImageTag }}
          docker pull $SRC_IMG

          echo "Assuming PROD role to push to PROD ECR"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) \
            --role-session-name "PROD-Access-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          echo "Logging into PROD ECR"
          aws ecr get-login-password --region $(PROD_AWS_REGION) | docker login --username AWS --password-stdin $(PROD_AWS_ACCOUNT_ID).dkr.ecr.$(PROD_AWS_REGION).amazonaws.com

          TGT_IMG=$(PROD_AWS_ACCOUNT_ID).dkr.ecr.$(PROD_AWS_REGION).amazonaws.com/$(PROD_ECR_FOLDER_NAME)/$(PROD_ECR_REPO_NAME):${{ parameters.ImageTag }}

          echo "Checking if image exists in PROD ECR"
          if ! aws ecr describe-images --repository-name $(PROD_ECR_REPO_NAME) --image-ids imageTag=${{ parameters.ImageTag }} --region $(PROD_AWS_REGION) > /dev/null 2>&1; then
            echo "Image not found in PROD ECR. Pushing..."
            docker tag $SRC_IMG $TGT_IMG
            docker push $TGT_IMG
          else
            echo "Image already exists in PROD ECR. Skipping push."
          fi
        displayName: "PROD: Promote Docker Image from UAT to PROD"

  - job: DEPLOY_PROD
    displayName: "PROD: Deploy Helm Chart"
    dependsOn: PREP_PROD_IMAGE
    pool:
      name: $(PROD_POOL_NAME)
    steps:
      - checkout: self

      - script: |
          echo "Assuming PROD AWS Role"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) \
            --role-session-name "PROD-Helm-Deploy-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          echo "Packaging Helm Chart"
          helm s3 init $(HELM_S3BUCKET_URL) || true
          helm repo add prod-helm $(HELM_S3BUCKET_URL) || true
          helm package $(HELM_CHARTS_PATH)
          mv $(SERVICE_NAME)-*.tgz $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz
          helm s3 push --force $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz prod-helm
        displayName: "PROD: Push Helm Chart to S3"

      - script: |
          echo "Deploying Helm Chart to PROD Cluster"
          helm repo update
          helm fetch prod-helm/$(SERVICE_NAME) --version 1.$(Build.BuildNumber)
          tar -xvf $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz
          helm upgrade --install $(ENV)-$(SERVICE_NAME) $(SERVICE_NAME)/ \
            -f $(SERVICE_NAME)/prod-values.yaml \
            --namespace $(NAMESPACE) \
            --kubeconfig $(KUBE_CONFIG_PATH) \
            --wait --timeout 3m
        displayName: "PROD: Helm Upgrade/Install"

      - script: |
          echo "Verifying PROD Deployment"
          echo "Assuming PROD AWS Role"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) \
            --role-session-name "PROD-Verify-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          echo "==== CronJobs ===="
          kubectl get cronjobs -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME) || echo "CronJob not found"

          echo "==== Jobs (last 5) ===="
          kubectl get jobs -n $(NAMESPACE) --sort-by=.metadata.creationTimestamp --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME) | tail -5 || echo "No jobs found"
        displayName: "PROD: Post Deployment Status Check"


getting below error
Assuming UAT role to access UAT ECR
Logging into UAT ECR
WARNING! Your password will be stored unencrypted in /home/app_user/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
Pulling image from UAT ECR
811_app_ms_kyc-development-20250702.2: Pulling from 811uatonb/k811_ms_kyc
43c4264eed91: Already exists
95e03b2f0c1a: Already exists
be7a0cdb0db4: Pull complete
Digest: sha256:b537a99345d346cf6f3983c97904d594d2dfb7ce7ff467bbf1c9cf995344c35c
Status: Downloaded newer image for 483584640083.dkr.ecr.ap-south-1.amazonaws.com/811uatonb/k811_ms_kyc:811_app_ms_kyc-development-20250702.2
483584640083.dkr.ecr.ap-south-1.amazonaws.com/811uatonb/k811_ms_kyc:811_app_ms_kyc-development-20250702.2
Assuming PROD role to push to PROD ECR

An error occurred (AccessDenied) when calling the AssumeRole operation: User: arn:aws:sts::483584640083:assumed-role/AWS-EC2-Role/i-06950af8d81d0affc is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::718378052708:role/EKS-Setup-Role-Kotak811
Logging into PROD ECR
WARNING! Your password will be stored unencrypted in /home/app_user/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store
Login Succeeded
Checking if image exists in PROD ECR
Image not found in PROD ECR. Pushing...
The push refers to repository [718378052708.dkr.ecr.ap-south-1.amazonaws.com/811prodonb/k811_kyc]
08d00990453d: Preparing
d7258737a97c: Preparing
4e9bab9b2ade: Preparing
f7d7c33dc116: Preparing
a8a8acedd62d: Preparing
e52e9af076ad: Preparing
b17b63edca77: Preparing
7d1bbfed2e41: Preparing
c37a78303182: Preparing
0f600007906e: Preparing
ddd506a4f5e8: Preparing
67a8e7f57a95: Preparing
63ca1fbb43ae: Preparing
0f600007906e: Waiting
c37a78303182: Waiting
ddd506a4f5e8: Waiting
67a8e7f57a95: Waiting
63ca1fbb43ae: Waiting
e52e9af076ad: Waiting
b17b63edca77: Waiting
7d1bbfed2e41: Waiting
denied: User: arn:aws:sts::483584640083:assumed-role/AWS-EC2-Role/i-06950af8d81d0affc is not authorized to perform: ecr:InitiateLayerUpload on resource: arn:aws:ecr:ap-south-1:718378052708:repository/811prodonb/k811_kyc because no identity-based policy allows the ecr:InitiateLayerUpload action

##[error]Bash exited with code '1'.
Finishing: PROD: Promote Docker Image from UAT to PROD
