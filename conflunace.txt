✅ Agenda:
Review DynamoDB automation progress.

Finalize handling of GSIs during billing mode transitions.

Plan next steps for testing and global replication setup.

🧠 Discussion Summary:
✅ Current Progress:

A Python script is developed to switch DynamoDB table billing mode (On-Demand ↔ Provisioned).

The script also detects GSIs and updates their capacity units if the table is in provisioned mode.

⚠️ Challenges Identified:

Many tables have 3–5 GSIs with different provisioned capacities.

Not feasible to hardcode capacities or maintain a config file for each table.

🧩 Agreed Solution:

Developers will provide a JSON input in the Azure DevOps pipeline to define GSI throughput (read/write units).

The script will parse this JSON and update GSIs accordingly.

Example input:

json
Copy
Edit
{
  "IndexName1": { "ReadCapacityUnits": 5, "WriteCapacityUnits": 10 },
  "IndexName2": { "ReadCapacityUnits": 3, "WriteCapacityUnits": 6 }
}
📦 Why JSON Works Best:

Avoids code change for every table or GSI.

Easy to maintain, especially in a shared repo per environment.

Developers get control without modifying core automation.

🌐 Global Tables Behavior:

Billing mode and GSI configuration must be consistent across all participating regions.

Region-specific billing modes are not supported in global tables.

Changing table or GSI settings in one region replicates the change to all others.

🧪 Planned Testing:

Identify a candidate DynamoDB table in the non-prod AWS account.

Enable global replication on that table (e.g., replicate to another region like ap-south-1 → ap-northeast-1).

Test switching billing modes and validate how GSIs and configuration sync across regions.
