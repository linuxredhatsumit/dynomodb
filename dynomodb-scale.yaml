trigger: none

variables:
  - group: Kotak-ECR-Credentials
  - name: POOL_NAME
    value: 'aws'
  - name: REPOSITORY_NAME
    value: 'gsi-config-repo'
  - name: AZURE_DEVOPS_PAT
    value: '7Y5jEF4pykUqWVgb2MgdqQm7s9EcySw068ZDHpCgzPZcRtPlq2ETJQQJ99BFACAAAAAAAAAAAAASAZDO1JRp'
  - name: GSI_REPO_URL
    value: 'dev.azure.com/sumits0911/Devops/_git/gsi-config-repo'
  - name: BRANCH_NAME
    value: 'dev'

parameters:
  - name: tableName
    type: string
  - name: region
    type: string
  - name: readMode
    type: string
    values: [ondemand, provisioned]
  - name: writeMode
    type: string
    values: [ondemand, provisioned]
  - name: minRead
    type: number
    default: 5
  - name: maxRead
    type: number
    default: 100
  - name: targetRead
    type: number
    default: 70
  - name: minWrite
    type: number
    default: 5
  - name: maxWrite
    type: number
    default: 100
  - name: targetWrite
    type: number
    default: 70
  - name: checkGSI
    type: boolean
    default: true
  - name: maxReadUnits
    type: number
    default: null
  - name: maxWriteUnits
    type: number
    default: null

pool:
  name: $(POOL_NAME)

stages:
  - stage: Scaling
    jobs:
      - job: RunAutoscaling
        steps:
          - checkout: self

          - script: |
              set -e
              rm -rf $(REPOSITORY_NAME)
              git clone --branch $(BRANCH_NAME) https://$(AZURE_DEVOPS_PAT)@$(GSI_REPO_URL) $(REPOSITORY_NAME)
            env:
              AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_PAT)
              Build_SourcesDirectory: $(Build.SourcesDirectory)
              REPOSITORY_NAME: $(REPOSITORY_NAME)
            condition: and(succeeded(), eq(${{ parameters.checkGSI }}, true))
            displayName: "Clone GSI Config Repo"

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8'
            displayName: "Set Python 3.8"

          - script: |
              pip install boto3 requests
            displayName: "Install boto3"

          - script: |
              set -e
              cd $(Build.SourcesDirectory)/dynomodb-scale
              # Build the command with optional parameters
              ARGS="--tableName \"${{ parameters.tableName }}\" \
                    --region \"${{ parameters.region }}\" \
                    --readMode \"${{ parameters.readMode }}\" \
                    --writeMode \"${{ parameters.writeMode }}\" \
                    --minRead \"${{ parameters.minRead }}\" \
                    --maxRead \"${{ parameters.maxRead }}\" \
                    --targetRead \"${{ parameters.targetRead }}\" \
                    --minWrite \"${{ parameters.minWrite }}\" \
                    --maxWrite \"${{ parameters.maxWrite }}\" \
                    --targetWrite \"${{ parameters.targetWrite }}\" \
                    --checkGSI \"${{ parameters.checkGSI }}\""
              # Add maxReadUnits if provided
              if [ ! -z "${{ parameters.maxReadUnits }}" ]; then
                ARGS="$ARGS --maxReadUnits \"${{ parameters.maxReadUnits }}\""
              fi
              # Add maxWriteUnits if provided
              if [ ! -z "${{ parameters.maxWriteUnits }}" ]; then
                ARGS="$ARGS --maxWriteUnits \"${{ parameters.maxWriteUnits }}\""
              fi
              # Run the command
              echo "Running command: python3 manage_dynamodb_autoscaling.py $ARGS"
              python3 manage_dynamodb_autoscaling.py $ARGS
            env:
              AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_PAT)
              Build_SourcesDirectory: $(Build.SourcesDirectory)
              REPOSITORY_NAME: $(REPOSITORY_NAME)
            displayName: "Run Autoscaling Script"
