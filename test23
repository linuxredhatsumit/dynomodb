trigger: none
variables:
  - group: Kotak-ECR-Credentials
  - name: SERVICE_NAME
    value: k811-ms-kyc-bitly-submit-cronjob
  - name: ENV
    value: prod
  - name: DR-ENV
    value: prod-dr
  # For AWS Role Access
  - name: PROD_ROLE_NAME
    value: EKS-Setup-Role-Kotak811
  - name: SOURCE_ROLE_NAME
    value: EKS_Setup_Role
  # details for prod repo to update pro-values.yaml
  - name: BRANCH_NAME
    value: master
  - name: REPOSITORY_NAME
    value: kotak-811-devops-prod

  # Agent pool details
  - name: DEVOPS_POOL_NAME
    value: "K811-DevOps"
  - name: PROD_POOL_NAME
    value: k811-prod
  - name: PROD_AGENT_IN_AGENTPOOL
    value: Linux-Agent3
  # docker details to push to prod ECR
  - name: PROD_PREFIX
    value: stable
  - name: PROD_AWS_REGION
    value: ap-south-1
  - name: PROD_AWS_ACCOUNT_ID
    value: "718378052708"
  - name: PROD_ECR_FOLDER_NAME
    value: 811prodonb
  - name: PROD_ECR_REPO_NAME
    value: k811_kyc

  # source Enviornmnet details
  - name: SOURCE_SERVICE_NAME
    value: k811-token-mandate-instructions
  - name: SOURCE_AWS_REGION
    value: ap-south-1
  - name: SOURCE_AWS_ACCOUNT_ID
    value: "483584640083"
  - name: SOURCE_ECR_FOLDER_NAME
    value: 811uatonb
  - name: SOURCE_ECR_REPO_NAME
    value: k811_ms_kyc
  - name: SOURCE_KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-uat
  - name: SOURCE_NAMESPACE
    value: 811-uat
  # helm related variables
  - name: HELM_CHARTS_PATH
    value: helm-charts/k811-ms-kyc-bitly-submit-cronjob/charts
  - name: HELM_S3BUCKET_URL
    value: s3://k811-onb-helmcharts/prod/k811-ms-kyc-bitly-submit-cronjob/
  - name: KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-prod
  - name: NAMESPACE
    value: prod
  - name: DR_KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-onb-dr
  - name: DR_HELM_S3BUCKET_URL
    value: s3://k811-onb-helmcharts-dr/prod/k811-ms-kyc-bitly-submit-cronjob/
  - name: PROD_AGENT_IN_AGENTPOOL
########################


parameters:
  - name: DeployPROD
    displayName: "Deploy to PROD"
    type: boolean
    default: true
  - name: DeployDR
    displayName: "Deploy to DR"
    type: boolean
    default: false
  - name: Jira_URL
    type: string
    default: ""
  - name: ImageTag
    type: string
    default: "1.20240625.1"




stages:
  - stage: DeployPROD
    condition: eq('${{ parameters.DeployPROD }}', 'true')
    jobs:
      - template: ../templates/prod-cron-deploy-tag.yaml
        parameters:
          ImageTag: ${{ parameters.ImageTag }}

  # - stage: DeployDR
  #   condition: eq('${{ parameters.DeployDR }}', 'true')
  #   jobs:
  #     - template: ../templates/prod-cron-deploy-tag-dr.yaml
  #       parameters:
  #         ImageTag: ${{ parameters.ImageTag }}

################
below is prod-cron-deploy-tag.yaml:


parameters:
  - name: ImageTag
    type: string
    displayName: "Image Tag to Deploy"
    default: "1.20240625.1"
  - name: DeployPROD
    displayName: "Deploy to PROD Environment"
    type: boolean
    default: true
  - name: DeployDR
    displayName: "Deploy to DR Environment"
    type: boolean
    default: false
  - name: Jira_URL
    type: string
    displayName: "Jira Ticket URL"
    default: ""

# ===================================================================
# == PIPELINE STAGES
# ===================================================================
stages:
- stage: Prepare_And_Promote_Image
  displayName: "Prepare & Promote Artifacts"
  jobs:
  - job: PREPARE_ARTIFACTS
    displayName: "Update Chart & Promote Docker Image"
    pool:
      name: $(DEVOPS_POOL_NAME)
    steps:
      - checkout: self
        displayName: "Checkout Source Code"

      - script: |
          echo "Updating Helm chart files with new version and image tag..."
          CHART_VERSION="1.$(Build.BuildNumber)"
          echo "Setting chart version to $CHART_VERSION and image tag to ${{ parameters.ImageTag }}"
          
          # Modify Chart.yaml
          sed -i -e "s/^version:.*/version: $CHART_VERSION/" $(HELM_CHARTS_PATH)/charts/Chart.yaml
          sed -i -e "s/^appVersion:.*/appVersion: ${{ parameters.ImageTag }}/" $(HELM_CHARTS_PATH)/charts/Chart.yaml
          
          # Modify prod-values.yaml
          sed -i -e "s/tag:.*/tag: ${{ parameters.ImageTag }}/" $(HELM_CHARTS_PATH)/charts/prod-values.yaml
          
          echo "Chart files updated."
        displayName: "Update Helm Chart Metadata"

      - script: |
          echo "--- Promoting Image from UAT to PROD ECR ---"
          
          echo "Step 1: Assume UAT role and pull image"
          CREDS_UAT=$(aws sts assume-role --role-arn arn:aws:iam::$(SOURCE_AWS_ACCOUNT_ID):role/$(SOURCE_ROLE_NAME) --role-session-name "UAT-Pull-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS_UAT | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS_UAT | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS_UAT | jq -r '.Credentials.SessionToken')
          
          aws ecr get-login-password --region $(SOURCE_AWS_REGION) | docker login --username AWS --password-stdin $(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.$(SOURCE_AWS_REGION).amazonaws.com
          
          SRC_IMG="$(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.$(SOURCE_AWS_REGION).amazonaws.com/$(SOURCE_ECR_FOLDER_NAME)/$(SOURCE_ECR_REPO_NAME):${{ parameters.ImageTag }}"
          docker pull $SRC_IMG

          echo "Step 2: Assume PROD role and push image"
          CREDS_PROD=$(aws sts assume-role --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) --role-session-name "PROD-Push-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS_PROD | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS_PROD | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS_PROD | jq -r '.Credentials.SessionToken')
          
          aws ecr get-login-password --region $(PROD_AWS_REGION) | docker login --username AWS --password-stdin $(PROD_AWS_ACCOUNT_ID).dkr.ecr.$(PROD_AWS_REGION).amazonaws.com

          TGT_IMG="$(PROD_AWS_ACCOUNT_ID).dkr.ecr.$(PROD_AWS_REGION).amazonaws.com/$(PROD_ECR_FOLDER_NAME)/$(PROD_ECR_REPO_NAME):${{ parameters.ImageTag }}"

          if ! aws ecr describe-images --repository-name $(PROD_ECR_REPO_NAME) --image-ids imageTag=${{ parameters.ImageTag }} --region $(PROD_AWS_REGION) > /dev/null 2>&1; then
            echo "Image not found in PROD ECR. Tagging and pushing..."
            docker tag $SRC_IMG $TGT_IMG
            docker push $TGT_IMG
          else
            echo "Image ${{ parameters.ImageTag }} already exists in PROD ECR. Skipping push."
          fi
        displayName: "Promote Docker Image to PROD ECR"
      
      - task: PublishPipelineArtifact@1
        displayName: "Publish updated Helm Chart as artifact"
        inputs:
          targetPath: '$(HELM_CHARTS_PATH)/charts'
          artifactName: 'helm-chart-prod'

- stage: DeployPROD
  displayName: "Deploy to PROD"
  dependsOn: Prepare_And_Promote_Image
  condition: and(succeeded(), eq('${{ parameters.DeployPROD }}', 'true'))
  jobs:
  - deployment: DeployHelmChartPROD
    displayName: "Deploy Helm Chart to PROD"
    pool:
      name: $(PROD_POOL_NAME)
    environment: 'PROD' # Optional: Link to an Azure DevOps Environment for approvals and tracking
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              displayName: "Download Helm Chart artifact"
              inputs:
                artifactName: 'helm-chart-prod'
                downloadPath: '$(System.ArtifactsDirectory)/helm-chart'
            
            - script: |
                echo "--- Deploying Helm chart to PROD ---"
                
                echo "Step 1: Assume PROD role"
                CREDS=$(aws sts assume-role --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) --role-session-name "PROD-Deploy-$(Build.BuildNumber)")
                export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
                export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
                export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

                CHART_DIR="$(System.ArtifactsDirectory)/helm-chart"
                CHART_VERSION="1.$(Build.BuildNumber)"

                echo "Step 2: Package and push chart to S3 Helm repo"
                helm s3 init $(HELM_S3BUCKET_URL) || true
                helm repo add prod-helm $(HELM_S3BUCKET_URL) || true
                
                helm package $CHART_DIR
                helm s3 push --force $(SERVICE_NAME)-$CHART_VERSION.tgz prod-helm

                echo "Step 3: Deploy chart using helm upgrade"
                helm repo update
                helm upgrade --install $(ENV)-$(SERVICE_NAME) prod-helm/$(SERVICE_NAME) \
                  --version $CHART_VERSION \
                  --namespace $(NAMESPACE) \
                  --kubeconfig $(KUBE_CONFIG_PATH) \
                  --wait --timeout 5m
              displayName: "Package, Push, and Deploy Helm Chart"

            - script: |
                echo "--- Verifying PROD Deployment ---"
                CREDS=$(aws sts assume-role --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) --role-session-name "PROD-Verify-$(Build.BuildNumber)")
                export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
                export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
                export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

                echo "Looking for CronJob: $(SERVICE_NAME)"
                kubectl get cronjob $(SERVICE_NAME) -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH)
              displayName: "Post Deployment Status Check"
