
parameters:
  - name: DeployDR
    type: boolean
    default: false
  - name: service
    type: string

stages:
  - ${{ if eq( parameters['DeployDR'], true) }}:
      - stage: DR
        displayName: "Build in DR Environment"
        jobs:
          - job: UpdateHelmChartsDR
            displayName: "Cronjob Update for DR"
            steps:
              - script: |
                  pwd
                  # Get the latest image tag from DR ECR
                  unset AWS_SESSION_TOKEN
                  unset AWS_SECRET_ACCESS_KEY
                  unset AWS_ACCESS_KEY_ID
                  CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)`
                  export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
                  export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
                  export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
                  version=$(aws ecr describe-images --repository-name $(DR_ECR_FOLDER_NAME)/$(DR_ECR_REPO_NAME) --region $(DR_AWS_REGION) --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]' --output text)
                  echo "##vso[task.setvariable variable=version]$version"
                  echo "Latest image tag in DR ECR: $version"
                displayName: "Get Latest Image Tag from DR ECR"

              - script: |
                  pwd
                  sed -i -e 's/name:.*/name: ${{ parameters.service }}/' $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/Chart.yaml
                  sed -i -e 's/appVersion:.*/appVersion: 1.$(Build.BuildNumber)/' $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/Chart.yaml
                  sed -i -e 's/version:.*/version: 1.$(Build.BuildNumber)/' $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/Chart.yaml
                  sed -i -e 's/tag:.*/tag: $(version)/' $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/uat-values.yaml
                displayName: "Updating Chart Values for DR"

              - script: |
                  pwd
                  unset AWS_SESSION_TOKEN
                  unset AWS_SECRET_ACCESS_KEY
                  unset AWS_ACCESS_KEY_ID
                  CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)`
                  export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
                  export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
                  export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
                  helm s3 init $(DR_HELM_S3BUCKET_URL)
                  helm repo add uat-${{ parameters.service }} $(DR_HELM_S3BUCKET_URL)
                  helm package $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/
                  helm s3 push --force $(System.DefaultWorkingDirectory)/${{ parameters.service }}-1.$(Build.BuildNumber).tgz uat-${{ parameters.service }}
                  aws s3 ls $(DR_HELM_S3BUCKET_URL)
                  helm repo update
                  helm search repo uat-${{ parameters.service }}
                displayName: "Charts Push To S3 DR"

              - script: |
                  pwd
                  unset AWS_SESSION_TOKEN
                  unset AWS_SECRET_ACCESS_KEY
                  unset AWS_ACCESS_KEY_ID
                  CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)`
                  export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
                  export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
                  export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
                  rm -rf $(System.DefaultWorkingDirectory)/*.tgz
                  helm repo update
                  helm fetch uat-${{ parameters.service }}/$(SERVICE_NAME)
                  tar -xvf ${{ parameters.service }}-1.$(Build.BuildNumber).tgz
                  echo "Starting the deployment in the namespace $(DR_NAMESPACE)"
                  helm upgrade --install uat-${{ parameters.service }} ${{ parameters.service }}/ -f ${{ parameters.service }}/uat-values.yaml --namespace $(DR_NAMESPACE) --kubeconfig $(DR_KUBE_CONFIG_PATH) --wait --timeout 3m
                displayName: "Helm Charts Deployment DR"
                continueOnError: true

              - script: |
                  pwd
                  unset AWS_SESSION_TOKEN
                  unset AWS_SECRET_ACCESS_KEY
                  unset AWS_ACCESS_KEY_ID
                  CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)`
                  export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
                  export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
                  export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
                  sleep 10
                  echo "########################## List of pods ########################################"
                  kubectl get po --namespace $(DR_NAMESPACE) --kubeconfig $(DR_KUBE_CONFIG_PATH) | grep -i ${{ parameters.service }}
                  echo "########################## List of deployed cronjobs ########################################"
                  kubectl get cronjob --namespace $(DR_NAMESPACE) --kubeconfig $(DR_KUBE_CONFIG_PATH) | grep -i ${{ parameters.service }}
                  echo "########################## Get logs of latest pod ########################################"
                  kubectl logs $(kubectl get pods --sort-by=.metadata.creationTimestamp -l app=${{ parameters.service }} -n $(DR_NAMESPACE) --kubeconfig $(DR_KUBE_CONFIG_PATH) | tail -n 1 | awk '{print $1}') -n $(DR_NAMESPACE) --kubeconfig $(DR_KUBE_CONFIG_PATH)
                displayName: "Application Status DR"
                continueOnError: true
