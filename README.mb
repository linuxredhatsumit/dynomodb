stages:
  - ${{ if eq( parameters['ServiceBuild'], true) }}:
      - stage: DevDocker
        jobs:
          - job: Dev
            timeoutInMinutes: 120
            pool:
              name: $(POOL_NAME)
              # demands:
              #   - agent.name -equals $(Agent_Name)
            # variables:
            #   Agent_Name: $[ stageDependencies.Dev.BuildAndDeploy.outputs['passOutput.AgentName'] ]
            steps:
              - checkout: self
                clean: false
              - script: |
                  set -e;
                  rm -rf $(${{ parameters.service }}_repository_name);
                  git clone https://$(PAT)@kmbl-devops.visualstudio.com/Kotak%20811%20Onboarding%20App/_git/$(${{ parameters.service }}_repository_name) -b ${{ parameters.BRANCH_NAME }};
                  echo "###################";
                  echo "$(${{ parameters.service }}_repository_name) is using ${{ parameters.BRANCH_NAME }} branch";
                displayName: Git Clone $(${{ parameters.service }}_repository_name) repository

              - script: |
                  echo ${{ parameters.BRANCH_NAME }}
                  BRANCH_TAG_NAME=`echo ${{ parameters.BRANCH_NAME }} | sed 's/[^a-zA-Z0-9]/_/g'`
                  echo "##vso[task.setvariable variable=BRANCH_TAG_NAME]$BRANCH_TAG_NAME"
                displayName: remove special charaters for docker tag

              - script: |
                  pwd
                  unset AWS_SESSION_TOKEN
                  unset AWS_SECRET_ACCESS_KEY
                  unset AWS_ACCESS_KEY_ID
                  CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)` 
                  export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
                  export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
                  export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
                  aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com
                  # docker buildx build --platform linux/amd64 -f $(DOCKERFILE_PATH) -t $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_FOLDER_NAME_DEV)/$(${{ parameters.service }}_ecr_dev):$(${{ parameters.service }}_repository_name)-$(BRANCH_TAG_NAME)-$(Build.BuildNumber) --push .
                  docker build --network=host -f $(DOCKERFILE_PATH) -t $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_FOLDER_NAME_DEV)/$(${{ parameters.service }}_ecr_dev):$(${{ parameters.service }}_repository_name)-$(BRANCH_TAG_NAME)-$(Build.BuildNumber) . ${{parameters.buildArgs}}
                  docker push $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_FOLDER_NAME_DEV)/$(${{ parameters.service }}_ecr_dev):$(${{ parameters.service }}_repository_name)-$(BRANCH_TAG_NAME)-$(Build.BuildNumber)
                displayName: "Docker Build and Push"
                workingDirectory: $(System.DefaultWorkingDirectory)/$(${{ parameters.service }}_repository_name)/

              - script: |
                  pwd
                  unset AWS_SESSION_TOKEN
                  unset AWS_SECRET_ACCESS_KEY
                  unset AWS_ACCESS_KEY_ID
                  CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)` 
                  export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
                  export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
                  export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
                  image=$(kubectl get deployment ${{ parameters.service }} -o jsonpath=''{$.spec.template.spec.containers[:1].image}'' -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH))
                  echo "Below Image is the Existing Docker Image for reference:"
                  echo $image
                displayName: "Existing Docker image of ${{ parameters.service }}"
