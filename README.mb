pipliene.yaml ----
trigger: none

parameters:
  - name: service
    displayName: Select Cluster/Service
    type: string
    default: k811-eks-onb-dev
    values:
      - k811-eks-onb-dev
      - k811-eks-corsshell-dev
      - k811-eks-onb-prod

variables:
  - group: onb-service-apigw-dev
  - group: Kotak-ECR-Credentials

  - name: ENV
    value: dev-arm
  - name: apigw_env
    value: dev

  # pool
  - name: POOL_NAME
    value: "K811-DevOps"

  # AWS role / region
  - name: AWS_REGION
    value: ap-south-1
  - name: AWS_ACCOUNT_ID
    value: "483584640083"
  - name: ROLE_NAME
    value: EKS_Setup_Role

  # helm repo/chart paths
  - name: HELM_CHARTS_PATH
    value: coralogix/charts
  - name: HELM_S3BUCKET_URL
    value: s3://kotak811-helmcharts/dev/${{ parameters.service }}/
  - name: NAMESPACE
    value: coralogix

  # cluster mapping
  - name: K8S_CLUSTER_NAME
    ${{ if eq(parameters.service, 'k811-eks-onb-dev') }}:
      value: "k811-eks-onb-dev"
    ${{ if eq(parameters.service, 'k811-eks-corsshell-dev') }}:
      value: "k811-eks-corsshell-dev"
    ${{ if eq(parameters.service, 'k811-eks-onb-prod') }}:
      value: "k811-eks-onb-prod"

  # kubeconfig mapping
  - name: KUBE_CONFIG_PATH
    ${{ if eq(parameters.service, 'k811-eks-onb-dev') }}:
      value: "/home/app_user/.kube/config-dev-arm"
    ${{ if eq(parameters.service, 'k811-eks-corsshell-dev') }}:
      value: "/home/app_user/.kube/config-dev"
    ${{ if eq(parameters.service, 'k811-eks-onb-prod') }}:
      value: "/home/app_user/.kube/config-uat"

pool:
  name: $(POOL_NAME)

stages:
  - stage: Build
    displayName: "Prepare Helm Chart"
    jobs:
      - job: UpdateChart
        displayName: "Update Chart.yaml"
        steps:
          - checkout: self
            clean: false

          - script: |
              echo "Updating Chart.yaml with service = ${{ parameters.service }} and build version = 1.$(Build.BuildNumber)"
              sed -i -e 's/^name:.*/name: ${{ parameters.service }}/' $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/Chart.yaml
              sed -i -e 's/^appVersion:.*/appVersion: 1.$(Build.BuildNumber)/' $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/Chart.yaml
              sed -i -e 's/^version:.*/version: 1.$(Build.BuildNumber)/' $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/Chart.yaml

              echo "Running helm dependency update..."
              helm dependency update $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/
            displayName: "Update Chart.yaml & Dependencies"

  - stage: PackageAndPush
    displayName: "Package & Push Helm Chart"
    dependsOn: Build
    jobs:
      - job: HelmPush
        steps:
          - script: |
              unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
              CREDENTIALS=$(aws sts assume-role \
                --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) \
                --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber))
              
              export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')
              export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
              export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')

              helm repo add $(ENV)-${{ parameters.service }} $(HELM_S3BUCKET_URL) || true
              helm repo update
              echo "Running helm dependency update..."
              helm dependency update $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)
              helm package $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/
              helm s3 push --force $(System.DefaultWorkingDirectory)/${{ parameters.service }}-1.$(Build.BuildNumber).tgz $(ENV)-${{ parameters.service }}
              helm repo update
              helm search repo $(ENV)-${{ parameters.service }}
            displayName: "Push Chart to S3 Repo"

  - stage: Deploy
    displayName: "Deploy to Kubernetes"
    dependsOn: PackageAndPush
    jobs:
      - job: HelmDeploy
        steps:
          - script: |
              unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
              CREDENTIALS=$(aws sts assume-role \
                --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) \
                --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber))
              
              export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')
              export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
              export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')

              helm repo update

              helm fetch $(ENV)-${{ parameters.service }}/${{ parameters.service }}
              tar -xvf ${{ parameters.service }}-1.$(Build.BuildNumber).tgz

              echo "Deploying to cluster: $(K8S_CLUSTER_NAME), kubeconfig: $(KUBE_CONFIG_PATH), namespace: $(NAMESPACE)"
              helm upgrade --install $(ENV)-${{ parameters.service }} \
                ${{ parameters.service }}/ \
                -f $(System.DefaultWorkingDirectory)/$(HELM_CHARTS_PATH)/$(K8S_CLUSTER_NAME).yaml \
                --namespace $(NAMESPACE) \
                --kubeconfig $(KUBE_CONFIG_PATH) \
                --wait --timeout 3m
            displayName: "Helm Deploy"
            continueOnError: true

coralogix/charts
charts.yaml ----
apiVersion: v2
name: kotak-coralogix
description: A Helm chart for coralogix service on k8s
version: 1.1.1
appVersion: "0.1.1"
dependencies:
  - name: otel-integration
    version: 0.0.168
    repository: "s3://kotak811-helmcharts/dev/coralogix-dev/k811-eks-onb-dev"

coralogix/charts
k811-eks-onb-dev.yaml -------
namespace: coralogix

global:
  clusterName: k811-eks-onb-dev
  collectionInterval: 60s
  domain: coralogix.in

opentelemetry-agent:
  enabled: true
  mode: daemonset
  config:
    processors:
      transform/remove-loglabels:
        error_mode: ignore
        log_statements:
        - context: resource
          statements:
          - delete_key(attributes, "host.image.id")
          - delete_key(attributes, "k8s.pod.uid")
          - delete_key(attributes, "cloud.account.id")
          - delete_key(attributes, "cloud.platform")
          - delete_key(attributes, "cloud.availability.zone")
          - delete_key(attributes, "cloud.availability_zone")
          - delete_key(attributes, "os.type")
          - delete_key(attributes, "cloud.provider")
          - delete_key(attributes, "cloud.region")
          - delete_key(attributes, "host.type")
    service:
      pipelines:
        logs:
          processors:
            - k8sattributes
            - resourcedetection/env
            - resourcedetection/region
            - batch
            - transform/remove-loglabels
        traces:
          exporters:
            - loadbalancing
  presets:
    loadBalancing:
      enabled: true
      hostname: coralogix-opentelemetry-gateway
      routingKey: traceID
    spanMetrics:
      enabled: true

opentelemetry-agent-windows:
  enabled: false

opentelemetry-cluster-collector:
  enabled: true

opentelemetry-gateway:
  enabled: true
  replicaCount: 3
  config:
    processors:
      tail_sampling:
        policies:
          - name: errors-policy
            status_code:
              status_codes: [ERROR]
            type: status_code
          - name: randomized-policy
            probabilistic:
              sampling_percentage: 10
            type: probabilistic

serviceaccount:
  enabled: true
  name: coralogix-dev-sa
  role: arn:aws:iam::483584640083:role/coralogix-dev-eks-sa

role:
  name: coralogix-dev-role

rolebinding:
  name: coralogix-dev-rb

appconfig:
  APPCONFIG_ENABLED: "true"
  APPCONFIG_ENVIRONMENT: "development"
  APPCONFIG_APPLICATION: "coralogix"
  APPCONFIG_PROFILE: "coralogix-dev-secret"

coralogix/charts/templates
configmap.yaml ------
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-configmap
  namespace: {{ .Values.namespace }}
data:
  {{- range $key, $value := .Values.appconfig }}
  {{ $key }}: {{ $value | toString | quote }}
  {{- end }}


coralogix/charts/templates
serviceaccount.yaml ----------
{{- if .Values.serviceaccount.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.serviceaccount.name }}
  namespace: {{ .Values.namespace }}
  annotations:
    eks.amazonaws.com/role-arn: {{ .Values.serviceaccount.role }}
{{- end }}



