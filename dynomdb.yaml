Starting: API Gateway Deploy : True
==============================================================================
Task         : Command line
Description  : Run a command line script using Bash on Linux and macOS and cmd.exe on Windows
Version      : 2.250.1
Author       : Microsoft Corporation
Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/command-line
==============================================================================
Generating script.
========================== Starting Command Output ===========================
/usr/bin/bash --noprofile --norc /home/app_user/workspace/Agent6/_work/_temp/22a6a61e-a966-45d0-832c-c00a2ce7fa98.sh
Cloning into '811_ms_config_service'...
fatal: repository 'https://kmbl-devops.visualstudio.com/Kotak%20811%20Onboarding%20App/_git/' not found
##[error]Bash exited with code '128'.
Finishing: API Gateway Deploy : True




below pipline
trigger:
  none

variables:
  - name: SERVICE_NAME
    value: k811-config-service
  - group: onb-811-services
  - group: UAT-Static-Variables 
  - name: ENV
    value: uat
  - name: apigw_env
    value: uat
  - name: apigw_env_dr
    value: uat_dr    
  # source Enviornmnet details
  - name: SOURCE_ECR_FOLDER_NAME
    value: 811devonb
  - name: SOURCE_ECR_REPO_NAME
    value: k811_ms_config_service
  - name: SOURCE_SERVICE_NAME
    value: k811-config-service
  - name: SOURCE_KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-dev-arm
  - name: SOURCE_NAMESPACE
    value: dev
  # Docker Details to push to uat ECR
  - name: AWS_REGION
    value: ap-south-1
  - name: AWS_ACCOUNT_ID
    value: "483584640083"
  - name: ROLE_NAME
    value: EKS_Setup_Role
  - name: ECR_FOLDER_NAME
    value: 811uatonb
  - name: ECR_REPO_NAME
    value: k811_ms_config-service
  #pool details
  - name: POOL_NAME
    value: "K811-DevOps"
  # helm related variables for uat environment
  - name: HELM_CHARTS_PATH
    value: helm-charts/k811-config-service/charts
  - name: HELM_S3BUCKET_URL
    value: s3://kotak811-helmcharts/uat/k811-config-service/
  - name: KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-uat
  - name: NAMESPACE
    value: 811-uat
  - name: DR_HELM_S3BUCKET_URL
    value: s3://kotak811-helmcharts-dr/uat/k811-config-service/

parameters:
  - name: service
    displayName: service
    type: string
    default: 'k811-config-service'
    values:
      - k811-config-service
  - name: RunAPIGWDeploy
    displayName: 'APIGW Deploy'
    type: boolean
    default: false
  - name: ServiceBuild
    displayName: ServiceBuild
    type: boolean
    default: false
  - name: RestartPod
    displayName: 'Restart Service'
    type: boolean
    default: false
  - name: PodLogs
    displayName: 'Running pod logs'
    type: boolean
    default: false        
  - name: ENABLE_ISTIO
    displayName: Custom Istio Image
    type: boolean
    default: 'false'

pool:
  name: $(POOL_NAME)

stages:
  - template: ../templates/uat/uat-deploy.yaml
    parameters:
      ServiceBuild: '${{ parameters.ServiceBuild }}'
      service: '${{ parameters.service }}'
      ENABLE_ISTIO: '${{ parameters.ENABLE_ISTIO }}'

  # - template: ../templates/uat/helm-build-dr.yaml
  #   parameters:
  #     ServiceBuild: '${{ parameters.ServiceBuild }}'
  #     service: '${{ parameters.service }}'

  - template: ../templates/uat/apigw-deploy.yaml
    parameters:
      RunAPIGWDeploy: '${{ parameters.RunAPIGWDeploy }}'
      service: '${{ parameters.service }}'
      apigw_env: $(apigw_env)

  # - template: ../templates/uat/apigw-deploy-dr.yaml
  #   parameters:
  #     RunAPIGWDeploy: '${{ parameters.RunAPIGWDeploy }}'
  #     service: '${{ parameters.service }}'
  #     apigw_env: $(apigw_env_dr)

  - template: ../templates/uat/pod-restart.yaml
    parameters:
      RestartPod: '${{ parameters.RestartPod }}'
      ServiceBuild: '${{ parameters.ServiceBuild }}'
      service: '${{ parameters.service }}'
      KUBE_CONFIG_PATH: $(KUBE_CONFIG_PATH)
      NAMESPACE: $(NAMESPACE)

  # - template: ../templates/uat/pod-restart-dr.yaml
  #   parameters:
  #     RestartPod: '${{ parameters.RestartPod }}'
  #     ServiceBuild: '${{ parameters.ServiceBuild }}'
  #     service: '${{ parameters.service }}'
  #     KUBE_CONFIG_PATH: $(DR_KUBE_CONFIG_PATH)      
  #     NAMESPACE: $(DR_NAMESPACE)            

  - template: ../templates/uat/pod-logs.yaml
    parameters:
      service: '${{ parameters.service }}'
      PodLogs: '${{ parameters.PodLogs }}'
      KUBE_CONFIG_PATH: $(KUBE_CONFIG_PATH)
      NAMESPACE: $(NAMESPACE)

  # - template: ../templates/uat/pod-logs-dr.yaml
  #   parameters:
  #     service: '${{ parameters.service }}'
  #     PodLogs: '${{ parameters.PodLogs }}'
  #     KUBE_CONFIG_PATH: $(DR_KUBE_CONFIG_PATH)      
  #     NAMESPACE: $(DR_NAMESPACE)  


  below
  - template: ../templates/uat/apigw-deploy.yaml


  stages:
  - ${{ if eq( parameters['RunAPIGWDeploy'], true) }}:
      - stage: APIGW_Update_and_Deployment_uat
        displayName: "API Gateway Update and Deployment uat"
        condition: not(or(failed(), canceled()))
        jobs:
          - job: APIGW_Update_and_Deployment_uat
            pool:
              name: $(POOL_NAME)
            steps:
              - checkout: self
                clean: false
              - script: |
                  rm -rf $(${{ parameters.service }}_repository_name);
                  git clone https://$(PAT)@kmbl-devops.visualstudio.com/Kotak%20811%20Onboarding%20App/_git/$(${{ parameters.service }}_repository_name) -b development;
                displayName: 'API Gateway Deploy : ${{ parameters.RunAPIGWDeploy }}'

              - script: |
                  set -e
                  unset AWS_SESSION_TOKEN
                  unset AWS_SECRET_ACCESS_KEY
                  unset AWS_ACCESS_KEY_ID
                  CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)`
                  export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
                  export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
                  export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`          
                  cd $(${{ parameters.service }}_repository_name)
                  echo "########## Service ${{ parameters.service }} Repository $(${{ parameters.service }}_repository_name) Current Branch #########"
                  git branch --show-current 
                  echo "########## Service ${{ parameters.service }} Repository $(${{ parameters.service }}_repository_name) last commit message #########"
                  DESCRIPTION=$(git show -s --format=%B HEAD)
                  echo $DESCRIPTION
                  echo "########## Updating API Gateway ${{ parameters.service }} in ${{ parameters.apigw_env }} Environment #########"            
                  aws apigateway put-rest-api --rest-api-id $(${{ parameters.service }}_apigw_id_uat) --parameters endpointConfigurationTypes=PRIVATE --mode overwrite --body 'fileb://apigw/${{ parameters.apigw_env }}/openapi.json'          
                  echo "########## Deploying API Gateway ${{ parameters.service }} in ${{ parameters.apigw_env }} Environment #########"  
                  aws apigateway create-deployment --rest-api-id $(${{ parameters.service }}_apigw_id_uat) --stage-name $(${{ parameters.service }}_apigw_stage_name_uat) --description "$DESCRIPTION"
                displayName: 'API Gateway Updating and Deploying for Service ${{ parameters.service }}'
