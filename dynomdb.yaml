steps:
  - script: |
      pwd
      sed -i -e 's/name:.*/name: $(SERVICE_NAME)/' $(HELM_CHARTS_PATH)/Chart.yaml
      sed -i -e 's/appVersion:.*/appVersion: 1.$(Build.BuildNumber)/' $(HELM_CHARTS_PATH)/Chart.yaml
      sed -i -e 's/version:.*/version: 1.$(Build.BuildNumber)/' $(HELM_CHARTS_PATH)/Chart.yaml
    displayName: "Production replace helm charts"
    workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

  - script: |
      pwd
      unset AWS_SESSION_TOKEN
      unset AWS_SECRET_ACCESS_KEY
      unset AWS_ACCESS_KEY_ID
      CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)`
      export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
      export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
      export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
      helm s3 init $(HELM_S3BUCKET_URL)
      helm repo add $(ENV)-$(SERVICE_NAME) $(HELM_S3BUCKET_URL) 
      helm package $(HELM_CHARTS_PATH)/
      helm s3 push --force $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz $(ENV)-$(SERVICE_NAME)
      aws s3 ls $(HELM_S3BUCKET_URL) 
      helm repo update 
      helm search repo $(ENV)-$(SERVICE_NAME)
    displayName: "Production Charts Push To S3"
    workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

  - script: |
      pwd
      unset AWS_SESSION_TOKEN
      unset AWS_SECRET_ACCESS_KEY
      unset AWS_ACCESS_KEY_ID
      CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)`
      export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
      export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
      export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
      rm -rf $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/*.tgz
      helm repo update
      helm fetch $(ENV)-$(SERVICE_NAME)/$(SERVICE_NAME)
      tar -xvf $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz
      helm upgrade --install $(ENV)-$(SERVICE_NAME) $(SERVICE_NAME)/ -f $(SERVICE_NAME)/$(ENV)-values.yaml --namespace $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH)  --wait --timeout 3m
    displayName: "Production Helm Charts Deployment"

  - script: |
      pwd
      unset AWS_SESSION_TOKEN
      unset AWS_SECRET_ACCESS_KEY
      unset AWS_ACCESS_KEY_ID
      CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)`
      export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
      export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
      export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
      sleep 10
      echo "########################## list of pods ########################################"
      kubectl get po --namespace $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME)
      echo "########################## list of deployed services ########################################"
      kubectl get deployment --namespace $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME)
    displayName: "Production Application Status"
# $(ENV)-$(SERVICE_NAME) = devopstest

# helm fetch devopstest-test/devopstest  --> it will download latest devopstest-1.20221128.12.tgz

# helm repo list
# helm history $(ENV)-$(SERVICE_NAME) -n test

# ROll back commands
# helm rollback <charts_name> 1 -n <namespace>  --> Roll back to a previous version. here 1 is vision number

# helm get values --revision=2 <charts_name> -n <namespace> --> Review the details for a specific revision.

