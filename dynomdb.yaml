package com.kotak811.partner.config;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kotak811.partner.exception.AwsAppConfigException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import software.amazon.awssdk.services.appconfigdata.AppConfigDataClient;
import software.amazon.awssdk.services.appconfigdata.model.GetLatestConfigurationRequest;
import software.amazon.awssdk.services.appconfigdata.model.StartConfigurationSessionRequest;
import software.amazon.awssdk.services.appconfigdata.model.StartConfigurationSessionResponse;

@Configuration
@EnableScheduling
public class AwsAppConfig {
  private static Logger log = LogManager.getLogger("AwsAppConfigLogger");
  private static final String DEFAULT_ENDPOINT =
      System.getenv("NODE") == null
          ? "http://" + "localhost" + ":2772"
          : "http://" + System.getenv("NODE") + ":2772";

  private static String CONFIG_PATH = getConfigPath();

  @Value("${leads.aws-app-config.environment:local}")
  private static String appConfigEnvironment;

  private static String getConfigPath() {
    return "/applications/onb-leads/environments/" + appConfigEnvironment + "/configurations/";
  }

  private String appConfigToken;
  private String mskSourceMskToken;
  private final AppConfigDataClient appConfigDataClient;
  private AwsAppConfigModel appConfiguration;
  private AwsKafkaMskConfigModel awsKafkaMskConfigModel;

  private final String agentEndpoint;
  private final RestTemplate restTemplate;
  private final ObjectMapper objectMapper;

  private final String appConfigProfile;
  private final String mskSourceProfile;

  public AwsAppConfig(
      @Value("${leads.aws-app-config-kafka-msk.profile}") String mskSourceProfile,
      @Value("${leads.aws-app-config.profile}") String profile,
      @Value("${leads.aws-app-config.environment}") String environment,
      @Value("${leads.aws-app-config.application}") String application,
      RestTemplate restTemplate,
      ObjectMapper objectMapper)
      throws JsonProcessingException {
    log.info("init app config");
    this.appConfigDataClient = AppConfigDataClient.builder().build();
    this.agentEndpoint = DEFAULT_ENDPOINT;
    this.restTemplate = restTemplate;
    this.objectMapper = objectMapper;
    this.appConfigProfile = profile;
    this.mskSourceProfile = mskSourceProfile;

    StartConfigurationSessionResponse appConfigResult =
        startConfigurationSession(appConfigDataClient, profile, environment, application);
    StartConfigurationSessionResponse mskSourceConfigResult =
        startConfigurationSession(appConfigDataClient, mskSourceProfile, environment, application);

    this.appConfigToken = appConfigResult.initialConfigurationToken();
    this.mskSourceMskToken = mskSourceConfigResult.initialConfigurationToken();

    this.pollAppConfiguration();
    this.pollMskSourceConfiguration();
  }

  private StartConfigurationSessionResponse startConfigurationSession(
      AppConfigDataClient client, String profile, String environment, String application) {
    var request = StartConfigurationSessionRequest.builder();
    request.environmentIdentifier(environment);
    request.applicationIdentifier(application);
    request.configurationProfileIdentifier(profile);
    request.requiredMinimumPollIntervalInSeconds(60);
    return client.startConfigurationSession(request.build());
  }

  @Bean(name = "awsAppConfigModel")
  public AwsAppConfigModel getConfig() {
    return this.appConfiguration;
  }

  @Bean(name = "awsKafkaMskConfigModel")
  public AwsKafkaMskConfigModel getKafkaMskConfig() {
    return this.awsKafkaMskConfigModel;
  }

  @Scheduled(
      fixedRateString = "${leads.aws-app-config-refresh:900000}",
      initialDelayString = "${leads.aws-app-config-refresh-delay:60000}")
  public void pollAppConfiguration() {
    log.info("app config polled");
    try {
      this.appConfiguration =
          fetchFromAwsAppConfigAgent(this.appConfigProfile, AwsAppConfigModel.class);
    } catch (Exception e) {
      log.error(
          "failed to fetch configuration from aws appconfig agent, falling back to direct aws sdk",
          e);

      try {
        this.appConfiguration = fetchAppConfigFromAwsSdk();
      } catch (Exception sdkException) {
        log.error("failed to fetch configuration from aws SDK fallback", sdkException);
      }
    }
  }

  @Scheduled(
      fixedRateString = "${leads.aws-app-config-refresh:900000}",
      initialDelayString = "${leads.aws-app-config-refresh-delay:60000}")
  private void pollMskSourceConfiguration() throws JsonProcessingException {
    log.info("Data Source Config polled");

    try {
      this.awsKafkaMskConfigModel =
          fetchFromAwsAppConfigAgent(this.mskSourceProfile, AwsKafkaMskConfigModel.class);
    } catch (Exception e) {
      log.error(
          "failed to fetch configuration from aws appconfig agent, falling back to direct aws sdk",
          e);
    }
    var request = GetLatestConfigurationRequest.builder();
    request.configurationToken(mskSourceMskToken);
    var result = appConfigDataClient.getLatestConfiguration(request.build());
    this.mskSourceMskToken = result.nextPollConfigurationToken();
    String currentConfig = result.configuration().asUtf8String();
    if (!(currentConfig.isEmpty())) {
      log.info("New Data Source Config was found");
      this.awsKafkaMskConfigModel =
          this.objectMapper.readValue(currentConfig, AwsKafkaMskConfigModel.class);
    }
  }

  /**
   * Fallback method to fetch configuration directly from AWS AppConfig using AWS SDK. This is used
   * when the AWS AppConfig Agent is not available.
   *
   * @return The configuration model
   * @throws JsonProcessingException If there is an error parsing the configuration
   */
  private AwsAppConfigModel fetchAppConfigFromAwsSdk() throws JsonProcessingException {
    if (appConfigDataClient == null || appConfigDataClient == null) {
      log.error("aws sdk client or token not initialized");
      throw new AwsAppConfigException(
          "K8116001", "error fetching aws configs via aws sdk", HttpStatus.INTERNAL_SERVER_ERROR);
    }

    log.info("fetching configuration directly from aws appconfig using sdk");

    try {
      var request = GetLatestConfigurationRequest.builder();
      request.configurationToken(appConfigToken);
      var result = appConfigDataClient.getLatestConfiguration(request.build());

      this.appConfigToken = result.nextPollConfigurationToken();

      String configJson = result.configuration().asUtf8String();
      if (configJson == null || configJson.isEmpty()) {
        log.info("no new configuration available from aws appconfig");
        return this.appConfiguration;
      }

      log.info("new app Config was found via aws sdk");
      return objectMapper.readValue(configJson, AwsAppConfigModel.class);
    } catch (Exception e) {
      log.error("error fetching configuration from aws appconfig using sdk", e);
      throw new AwsAppConfigException(
          "K8116001", "error fetching aws configs via aws sdk", HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  private <T> T fetchFromAwsAppConfigAgent(String profile, Class<T> tClass) {
    try {
      String url = agentEndpoint + CONFIG_PATH + profile;
      log.info("fetching configuration from aws appconfig Agent: {}", url);

      ResponseEntity<T> response = restTemplate.getForEntity(url, tClass);

      log.error("aws appconfig agent response: {}", response.getBody());
      if (response.getStatusCode() != HttpStatus.OK) {
        throw new AwsAppConfigException(
            "K8116001", "error fetching aws configs via aws sdk", HttpStatus.INTERNAL_SERVER_ERROR);
      }

      return response.getBody();
    } catch (RestClientException e) {
      log.error("error communicating with appconfig agent", e);
      throw new AwsAppConfigException(
          "K8116001", "error fetching aws configs via aws sdk", HttpStatus.INTERNAL_SERVER_ERROR);
    } catch (Exception e) {
      throw new AwsAppConfigException(
          "K8116001", "error fetching aws configs via aws sdk", HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
}
