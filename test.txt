parameters:
  - name: DeployPROD
    type: boolean
    default: true
  - name: ImageTag
    type: string
    default: ''

jobs:
- ${{ if eq(parameters.DeployPROD, true) }}:
  - job: Deploy_PROD
    displayName: "PROD Deployment Job"
    steps:
      - checkout: self

      - script: |
          echo "Preparing Helm Chart Metadata"
          VERSION_TAG="1.$(Build.BuildNumber)"
          echo "Chart version will be: $VERSION_TAG"
          sed -i -e "s/^version:.*/version: $VERSION_TAG/" $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e "s/^appVersion:.*/appVersion: $VERSION_TAG/" $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e "s/^name:.*/name: $(SERVICE_NAME)/" $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e "s/^  tag:.*/  tag: '${{ parameters.ImageTag }}'/" $(HELM_CHARTS_PATH)/prod-values.yaml
        displayName: "PROD: Update Helm Chart Metadata and Image Tag"

      - script: |
          echo "Assuming UAT role and pulling image"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(SOURCE_AWS_ACCOUNT_ID):role/$(UAT_ROLE_NAME) \
            --role-session-name "PullFromUAT-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com

          SOURCE_IMAGE=$(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com/$(SOURCE_ECR_FOLDER_NAME)/$(SOURCE_ECR_REPO_NAME):${{ parameters.ImageTag }}
          docker pull $SOURCE_IMAGE
        displayName: "Assume UAT role and pull image"

      - script: |
          echo "Tag and push image to PROD ECR"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) \
            --role-session-name "PushToPROD-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $(PROD_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com

          TARGET_IMAGE=$(PROD_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com/$(PROD_ECR_FOLDER_NAME)/$(PROD_ECR_REPO_NAME):${{ parameters.ImageTag }}
          docker tag $SOURCE_IMAGE $TARGET_IMAGE
          docker push $TARGET_IMAGE
        displayName: "Tag and push image to PROD ECR"

      - script: |
          echo "Packaging Helm chart and pushing to S3"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) \
            --role-session-name "HelmPush-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          helm s3 init $(HELM_S3BUCKET_URL)
          helm repo add $(ENV)-$(SERVICE_NAME) $(HELM_S3BUCKET_URL)
          helm package $(HELM_CHARTS_PATH)
          mv $(SERVICE_NAME)-*.tgz $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz
          helm s3 push --force $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz $(ENV)-$(SERVICE_NAME)
          helm repo update
        displayName: "PROD: Push Helm Chart to S3"

      - script: |
          echo "Deploying Helm Chart to PROD"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) \
            --role-session-name "DeployToPROD-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          rm -rf *.tgz
          helm fetch $(ENV)-$(SERVICE_NAME)/$(SERVICE_NAME) --version 1.$(Build.BuildNumber)
          tar -xvf $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz

          helm upgrade --install $(ENV)-$(SERVICE_NAME) $(SERVICE_NAME)/ \
            -f $(SERVICE_NAME)/prod-values.yaml \
            --namespace $(NAMESPACE) \
            --kubeconfig $(KUBE_CONFIG_PATH) \
            --wait --timeout 3m
        displayName: "PROD: Helm Upgrade or Install"

      - script: |
          echo "Verifying Deployment"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) \
            --role-session-name "PostCheck-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          echo "==== CronJobs ===="
          kubectl get cronjobs -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME) || echo "CronJob not found"

          echo "==== Jobs (last 5) ===="
          kubectl get jobs -n $(NAMESPACE) --sort-by=.metadata.creationTimestamp --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME) | tail -5 || echo "No jobs found"

          echo "Post-deploy check completed"
        displayName: "PROD: Post Deployment Status"
