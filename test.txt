trigger: none

parameters:
  - name: DeployUAT
    displayName: "Deploy to UAT"
    type: boolean
    default: true
  - name: DeployDR
    displayName: "Deploy to DR"
    type: boolean
    default: false
  - name: Jira_URL
    type: string
    default: ""
  - name: ImageTag
    type: string
    default: "1.20240625.1"

variables:
  - name: ENV
    value: uat
  - name: SERVICE_NAME
    value: k811-ms-kyc-bitly-submit-new-cronjob

  # AWS Access Details
  - name: AWS_ACCOUNT_ID
    value: "483584640083"
  - name: ROLE_NAME
    value: EKS_Setup_Role

  # Pool Details
  - name: POOL_NAME
    value: "K811-DevOps"

  # Helm related
  - name: HELM_CHARTS_PATH
    value: helm-charts/k811-ms-kyc-bitly-submit-new-cronjob/charts
  - name: HELM_S3BUCKET_URL
    value: s3://kotak811-helmcharts/uat/k811-ms-kyc-bitly-submit-new-cronjob/
  - name: KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-uat
  - name: NAMESPACE
    value: 811-uat

  # DR bucket
  - name: DR_HELM_S3BUCKET_URL
    value: s3://kotak811-helmcharts-dr/uat/k811-ms-kyc-bitly-submit-new-cronjob/
  - name: DR_KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-uat-dr
  - name: DR_NAMESPACE
    value: 811-uat-dr

  # Source (UAT)
  - name: SOURCE_ECR_FOLDER_NAME
    value: 811devonb
  - name: SOURCE_ECR_REPO_NAME
    value: k811_ms_kyc
  - name: SOURCE_AWS_REGION
    value: ap-south-1

  # Docker (target ECR)
  - name: AWS_REGION
    value: ap-south-1
  - name: ECR_FOLDER_NAME
    value: 811uatonb
  - name: ECR_REPO_NAME
    value: k811_ms_kyc

pool:
  name: $(POOL_NAME)

stages:
  - stage: DeployUAT
    condition: eq('${{ parameters.DeployUAT }}', 'true')
    jobs:
      - template: ../templates/uat/uat-cron-deploy-tag.yaml
        parameters:
          service: $(SERVICE_NAME)
          ImageTag: ${{ parameters.ImageTag }}

  - stage: DeployDR
    condition: eq('${{ parameters.DeployDR }}', 'true')
    jobs:
      - template: ../templates/uat/uat-cron-deploy-tag-dr.yaml
        parameters:
          service: $(SERVICE_NAME)
          ImageTag: ${{ parameters.ImageTag }}
############################################

parameters:
  - name: DeployUAT
    type: boolean
    default: true
  - name: ImageTag
    type: string
    default: ''

jobs:
- ${{ if eq(parameters.DeployUAT, true) }}:
  - job: Deploy_UAT
    displayName: "UAT Deployment Job"
    steps:
      - script: |
          echo "Updating Helm Chart Metadata"
          sed -i -e 's/name:.*/name: $(SERVICE_NAME)/' $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e 's/appVersion:.*/appVersion: ${{ parameters.ImageTag }}/' $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e 's/version:.*/version: ${{ parameters.ImageTag }}/' $(HELM_CHARTS_PATH)/Chart.yaml
        displayName: "UAT: Update Helm Chart Metadata"
        workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

      - script: |
          echo "Assuming AWS Role for UAT"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) \
            --role-session-name "$(Build.DefinitionName)-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
          helm s3 init $(HELM_S3BUCKET_URL)
          helm repo add $(ENV)-$(SERVICE_NAME) $(HELM_S3BUCKET_URL)
          helm package $(HELM_CHARTS_PATH)/
          helm s3 push --force $(SERVICE_NAME)-${{ parameters.ImageTag }}.tgz $(ENV)-$(SERVICE_NAME)
          helm repo update
        displayName: "UAT: Push Helm Chart to S3"
        workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

      - script: |
          echo "Deploying Helm Chart to UAT"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) \
            --role-session-name "$(Build.DefinitionName)-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
          rm -rf *.tgz
          helm fetch $(ENV)-$(SERVICE_NAME)/$(SERVICE_NAME) --version ${{ parameters.ImageTag }}
          tar -xvf $(SERVICE_NAME)-${{ parameters.ImageTag }}.tgz
          helm upgrade --install $(ENV)-$(SERVICE_NAME) $(SERVICE_NAME)/ \
            -f $(SERVICE_NAME)/$(ENV)-values.yaml \
            --namespace $(NAMESPACE) \
            --kubeconfig $(KUBE_CONFIG_PATH) \
            --wait --timeout 3m
        displayName: "UAT: Helm Upgrade or Install"
        workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

      - script: |
          echo "Verifying Deployment"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) \
            --role-session-name "$(Build.DefinitionName)-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
          sleep 10
          echo "==== Pods ===="
          kubectl get pods -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME)
          echo "==== Deployments ===="
          kubectl get deployment -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME)
        displayName: "UAT: Post Deployment Status"
