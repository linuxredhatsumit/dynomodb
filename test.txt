trigger: none

# resources:
#   pipelines:
#   - pipeline: kotak-811-devops-helmcharts-frm-junit
#     source: kotak-811-devops-helmcharts-frm-junit
#     project: Kotak 811 Onboarding App
#     trigger:
#       branches:
#         include:
#           - master

# pass varibale to build.yaml file.
variables:
  - group: Kotak-ECR-Credentials
  - name: SERVICE_NAME
    value: k811-kyc
  - name: ENV
    value: prod
  - name: DR-ENV
    value: prod-dr
  # For AWS Role Access
  - name: PROD_ROLE_NAME
    value: EKS-Setup-Role-Kotak811
  - name: UAT_ROLE_NAME
    value: EKS_Setup_Role
  # details for prod repo to update pro-values.yaml
  - name: BRANCH_NAME
    value: master
  - name: REPOSITORY_NAME
    value: kotak-811-devops-prod

  # Agent pool details
  - name: DEVOPS_POOL_NAME
    value: "K811-DevOps"
  - name: PROD_POOL_NAME
    value: k811-prod
  - name: PROD_AGENT_IN_AGENTPOOL
    value: Linux-Agent3
  # docker details to push to prod ECR
  - name: PROD_PREFIX
    value: stable
  - name: PROD_AWS_REGION
    value: ap-south-1
  - name: PROD_AWS_ACCOUNT_ID
    value: "718378052708"
  - name: PROD_ECR_FOLDER_NAME
    value: 811prodonb
  - name: PROD_ECR_REPO_NAME
    value: k811_kyc

  # source Enviornmnet details
  - name: SOURCE_SERVICE_NAME
    value: k811-kyc
  - name: SOURCE_AWS_REGION
    value: ap-south-1
  - name: SOURCE_AWS_ACCOUNT_ID
    value: "483584640083"
  - name: SOURCE_ECR_FOLDER_NAME
    value: 811uatonb
  - name: SOURCE_ECR_REPO_NAME
    value: k811_ms_kyc
  - name: SOURCE_KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-uat
  - name: SOURCE_NAMESPACE
    value: 811-uat
  # helm related variables
  - name: HELM_CHARTS_PATH
    value: helm-charts/k811-kyc/charts
  - name: HELM_S3BUCKET_URL
    value: s3://k811-onb-helmcharts/prod/k811-kyc/
  - name: KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-prod
  - name: NAMESPACE
    value: prod
  - name: DR_KUBE_CONFIG_PATH
    value: /home/app_user/.kube/config-onb-dr
  - name: DR_HELM_S3BUCKET_URL
    value: s3://k811-onb-helmcharts-dr/prod/k811-kyc/
  - name: PROD_AGENT_IN_AGENTPOOL
    value: Linux-Agent3

# Parameter to input Jira Ticket
parameters:
  - name: Jira_URL
    type: string
    default: ""
    displayName: "Jira URL"

stages:
  - stage: ECR_CLONE
    pool:
      name: $(DEVOPS_POOL_NAME)
    jobs:
      - deployment: PRODDeployment
        displayName: PRODDeployment
        environment: prod-pipeline-approvals
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "approved to deploy UAT Image to PROD"
                  displayName: Approve UAT image to depoly in PROD
      - job: ECR_IMAGE_PUSH_FROM_UAT_TO_PROD
        steps:
          - script: |
              pwd
              unset AWS_SESSION_TOKEN
              unset AWS_SECRET_ACCESS_KEY
              unset AWS_ACCESS_KEY_ID
              CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(SOURCE_AWS_ACCOUNT_ID):role/$(UAT_ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)` 
              export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
              export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
              export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
              version=$(kubectl get deployment $(SOURCE_SERVICE_NAME) -o jsonpath=''{$.spec.template.spec.containers[:1].image}'' -n $(SOURCE_NAMESPACE) --kubeconfig $(SOURCE_KUBE_CONFIG_PATH) | cut -d ':' -f 2)
              echo "##vso[task.setvariable variable=version]$version"
            displayName: "$(SOURCE_SERVICE_NAME) Tag value in UAT environment ."

          - script: |
              echo $(version)
            displayName: UAT Environment Docker image of $(SOURCE_SERVICE_NAME)

          - script: |
              pwd
              unset AWS_SESSION_TOKEN
              unset AWS_SECRET_ACCESS_KEY
              unset AWS_ACCESS_KEY_ID
              CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::$(SOURCE_AWS_ACCOUNT_ID):role/$(UAT_ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber)` 
              export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
              export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
              export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
              aws ecr get-login-password --region $(SOURCE_AWS_REGION) | docker login --username AWS --password-stdin $(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.$(SOURCE_AWS_REGION).amazonaws.com
              docker pull $(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.$(SOURCE_AWS_REGION).amazonaws.com/$(SOURCE_ECR_FOLDER_NAME)/$(SOURCE_ECR_REPO_NAME):$(version)
              docker tag $(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.$(SOURCE_AWS_REGION).amazonaws.com/$(SOURCE_ECR_FOLDER_NAME)/$(SOURCE_ECR_REPO_NAME):$(version) $(PROD_AWS_ACCOUNT_ID).dkr.ecr.$(PROD_AWS_REGION).amazonaws.com/$(PROD_ECR_FOLDER_NAME)/$(PROD_ECR_REPO_NAME):$(PROD_PREFIX)-$(version)
              aws ecr get-login-password --region $(PROD_AWS_REGION) | docker login --username AWS --password-stdin $(PROD_AWS_ACCOUNT_ID).dkr.ecr.$(PROD_AWS_REGION).amazonaws.com
              docker push $(PROD_AWS_ACCOUNT_ID).dkr.ecr.$(PROD_AWS_REGION).amazonaws.com/$(PROD_ECR_FOLDER_NAME)/$(PROD_ECR_REPO_NAME):$(PROD_PREFIX)-$(version)
            displayName: "Login, Docker and Push"

          - script: |
              git clone https://$(PAT)@kmbl-devops.visualstudio.com/Kotak%20811%20Onboarding%20App/_git/$(REPOSITORY_NAME) -b $(BRANCH_NAME)
            displayName: "clone repository"

          - script: |
              pwd
              git pull 
              sed -i -e 's/tag:.*/tag: $(PROD_PREFIX)-$(version)/'  $(HELM_CHARTS_PATH)/$(ENV)-values.yaml
              sed -i -e 's/tag:.*/tag: $(PROD_PREFIX)-$(version)/'  $(HELM_CHARTS_PATH)/$(DR-ENV)-values.yaml
            displayName: "replace helm charts"
            workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

          - script: |
              git config --global user.email "pipeline@kotak.com"
              git config --global user.name "Pipeline"
              git add -A
              git status
              git commit -m "azure pipeline commited to updated prod-values.yaml in helm charts"
              echo "Pushing now!!!"
              git pull
              git push -u origin $(BRANCH_NAME)
            displayName: "Updating Chart Values"
            workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

  - stage: PROD
    pool:
      name: $(PROD_POOL_NAME)
      # demands:
      #   - agent.name -equals $(PROD_AGENT_IN_AGENTPOOL)
    displayName: "Build in PROD Environment"
    jobs:
      # - deployment: PRODDeployment
      #   displayName: PRODDeployment
      #   environment: devops-test-approval
      #   strategy:
      #     runOnce:
      #       deploy:
      #         steps:
      #         - script: |
      #             echo "approved to deploy UAT Image to PROD"
      #           displayName: Approve UAT image to depoly in PROD
      - job: Service_deployment_in_PROD
        displayName: "Service deployment in PROD"
        steps:
          - script: |
              git clone https://$(PAT)@kmbl-devops.visualstudio.com/Kotak%20811%20Onboarding%20App/_git/$(REPOSITORY_NAME) -b $(BRANCH_NAME)
            displayName: "clone repository"
          - template: build.yaml
          - template: dr-build.yaml
