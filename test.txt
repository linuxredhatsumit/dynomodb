parameters:
  - name: DeployUAT
    type: boolean
    default: true
  - name: ImageTag
    type: string
    default: ''

jobs:
- ${{ if eq(parameters.DeployUAT, true) }}:
  - job: Deploy_UAT
    displayName: "UAT Deployment Job"
    steps:
      - checkout: self

      - script: |
          echo "Preparing Helm Chart Metadata"
          VERSION_TAG="1.$(Build.BuildNumber)"
          echo "Chart version will be: $VERSION_TAG"
          sed -i -e "s/^version:.*/version: $VERSION_TAG/" $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e "s/^appVersion:.*/appVersion: $VERSION_TAG/" $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e "s/^name:.*/name: $(SERVICE_NAME)/" $(HELM_CHARTS_PATH)/Chart.yaml
          sed -i -e "s/^  tag:.*/  tag: '${{ parameters.ImageTag }}'/" $(HELM_CHARTS_PATH)/uat-values.yaml
        displayName: "UAT: Update Helm Chart Metadata and Image Tag"

      - script: |
          echo "Assuming AWS Role for UAT"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) \
            --role-session-name "$(Build.DefinitionName)-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          echo "Promoting Docker Image from Dev ECR to UAT ECR"

          source_image=$(DEV_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com/$(SERVICE_NAME):${{ parameters.ImageTag }}
          target_image=$(AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com/$(SERVICE_NAME):${{ parameters.ImageTag }}

          echo "Source image: $source_image"
          echo "Target image: $target_image"

          echo "Checking if image already exists in UAT ECR..."
          if ! aws ecr describe-images --repository-name $(SERVICE_NAME) --image-ids imageTag=${{ parameters.ImageTag }} --region ap-south-1 > /dev/null 2>&1; then
            echo "Image not found in UAT. Copying from Dev..."
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $(DEV_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com

            docker pull $source_image
            docker tag $source_image $target_image
            docker push $target_image
          else
            echo "Image already exists in UAT ECR. Skipping push."
          fi
        displayName: "UAT: Promote Docker Image if Not Present"

      - script: |
          echo "Packaging Helm chart..."
          helm s3 init $(HELM_S3BUCKET_URL)
          helm repo add $(ENV)-$(SERVICE_NAME) $(HELM_S3BUCKET_URL)
          helm package $(HELM_CHARTS_PATH)
          mv $(SERVICE_NAME)-*.tgz $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz
          helm s3 push --force $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz $(ENV)-$(SERVICE_NAME)
          helm repo update
        displayName: "UAT: Push Helm Chart to S3"

      - script: |
          echo "Deploying Helm Chart to UAT"
          unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) \
            --role-session-name "$(Build.DefinitionName)-$(Build.BuildNumber)")
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

          rm -rf *.tgz
          helm fetch $(ENV)-$(SERVICE_NAME)/$(SERVICE_NAME) --version 1.$(Build.BuildNumber)
          tar -xvf $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz
          helm upgrade --install $(ENV)-$(SERVICE_NAME) $(SERVICE_NAME)/ \
            -f $(SERVICE_NAME)/$(ENV)-values.yaml \
            --namespace $(NAMESPACE) \
            --kubeconfig $(KUBE_CONFIG_PATH) \
            --wait --timeout 3m
        displayName: "UAT: Helm Upgrade or Install"

- script: |
    echo "Verifying Deployment"
    unset AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID
    CREDS=$(aws sts assume-role \
      --role-arn arn:aws:iam::$(AWS_ACCOUNT_ID):role/$(ROLE_NAME) \
      --role-session-name "$(Build.DefinitionName)-$(Build.BuildNumber)")
    export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
    export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
    export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

    echo "==== CronJobs ===="
    kubectl get cronjobs -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME) || echo "CronJob not found"

    echo "==== Jobs (last 5) ===="
    kubectl get jobs -n $(NAMESPACE) --sort-by=.metadata.creationTimestamp --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME) | tail -5 || echo "No jobs found"

    echo "Post-deploy check completed"
  displayName: "UAT: Post Deployment Status"
