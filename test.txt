trigger: none

resources:
  - repo: self

pool: 
  name: $(AWS_AGENT_POOL)
  workspace:
    clean: all

# # # To continue the pipeline in terraform-apply-build.yaml.
extends:
  template: terraform-apply-build.yaml
  parameters:
    environmentfolder: ${{ parameters.ENVIRONMENT_NAME }}
    servicefolder: ${{ parameters.AWS_SERVICE_NAME }}
    # - terraformVersion: '0.15.2'

variables:
  - group: GIT
  # - group: AWS-reference-keys
  # - group: Kotak-ECR-Credentials
# Agent pool details
  - name: AWS_AGENT_POOL
    value: 'k811-prod'
  - name: AGENT_IN_AGENTPOOL
    value: Linux-Agent1
##### For AWS Role Access ########
  - name: ROLE_NAME
    value: EKS-Setup-Role-Kotak811
  - name: SOURCE_ACCOUNT_NAME
    value: PROD
parameters:
- name: JIRA
  type: string
  displayName: 'please provide JIRA ID'
  default: ''
- name: ENVIRONMENT_NAME
  displayName: ENVIRONMENT_NAME
  type: string
  default: kotak811-prod
  values:
  - kotak811-prod
  - kotak811-prod-dr
- name: AWS_SERVICE_NAME
  displayName: AWS_SERVICE_NAME
  type: string
  default: vpc


above is azure pipline below is terraform-apply-build.yaml
parameters:
  - name: environmentfolder
    type: string
    default: test
  - name: servicefolder
    type: string
    default: test
  - name: planArgs
    default: ''
  - name: applyArgs
    default: ''
    

stages:
  - stage: "ValidatePlanTerraform"
    displayName: "Terraform - Validate and Plan"
    jobs:
      - job: TerraformValidate
        displayName: TerraformValidate
        steps:
          - script: |
              git config --global url."https://$(PAT)@dev.azure.com/kmbl-devops/".insteadOf "https://kmbl-devops@dev.azure.com/kmbl-devops/"
            displayName: 'Configure Git to use PAT'

          - script: |
              pwd
              rm -rf .terraform
              declare -A mymap=(["PROD"]="718378052708" ["811Kotak"]="12122312312312312")
              unset AWS_SESSION_TOKEN
              unset AWS_SECRET_ACCESS_KEY
              unset AWS_ACCESS_KEY_ID

              CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::${mymap[$(SOURCE_ACCOUNT_NAME)]}:role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber) --duration-seconds=3600` 

              export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
              export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
              export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
              terraform --version
              terraform init
            workingDirectory: $(System.DefaultWorkingDirectory)/env/${{ parameters.environmentfolder }}/${{ parameters.servicefolder }}/
            displayName: Terraform Init
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

      - job: planTerraform
        dependsOn: TerraformValidate
        displayName: TerraformPlan
        steps:
          - checkout: self
            clean: false
          - script: |
              git config --global url."https://$(PAT)@dev.azure.com/kmbl-devops/".insteadOf "https://kmbl-devops@dev.azure.com/kmbl-devops/"
            displayName: 'Configure Git to use PAT'

          - script: |
              pwd
              declare -A mymap=(["PROD"]="718378052708" ["811Kotak"]="12122312312312312")
              unset AWS_SESSION_TOKEN
              unset AWS_SECRET_ACCESS_KEY
              unset AWS_ACCESS_KEY_ID

              CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::${mymap[$(SOURCE_ACCOUNT_NAME)]}:role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber) --duration-seconds=3600` 

              export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
              export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
              export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
              terraform plan
            workingDirectory: $(System.DefaultWorkingDirectory)/env/${{ parameters.environmentfolder }}/${{ parameters.servicefolder }}/
            displayName: Terraform plan
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

  - stage: "TerraformApply"
    dependsOn:
      - "ValidatePlanTerraform"
    displayName: TerraformApply
    jobs:
      - deployment: Apply
        displayName: "Apply"
        environment: Terraform-Prod
        timeoutInMinutes: 300
        # environment: Terraform-Non-Prod
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    git config --global url."https://$(PAT)@dev.azure.com/kmbl-devops/".insteadOf "https://kmbl-devops@dev.azure.com/kmbl-devops/"
                  displayName: 'Configure Git to use PAT'
                - script: |
                    pwd
                    declare -A mymap=(["PROD"]="718378052708" ["811Kotak"]="12122312312312312")
                    unset AWS_SESSION_TOKEN
                    unset AWS_SECRET_ACCESS_KEY
                    unset AWS_ACCESS_KEY_ID

                    CREDENTIALS=`aws sts assume-role --role-arn arn:aws:iam::${mymap[$(SOURCE_ACCOUNT_NAME)]}:role/$(ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber) --duration-seconds=14400` 

                    export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
                    export AWS_SECRET_ACCESS_KEY=`echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey'`
                    export AWS_ACCESS_KEY_ID=`echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId'`
                    terraform apply --auto-approve
                  workingDirectory: $(System.DefaultWorkingDirectory)/env/${{ parameters.environmentfolder }}/${{ parameters.servicefolder }}/
                  displayName: Terraform Apply
                  env:
                    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

