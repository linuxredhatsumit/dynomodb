parameters:
  - name: ImageTag
    type: string
    displayName: "Image Tag to Deploy"
    default: "1.20240625.1"
  - name: DeployPROD
    displayName: "Deploy to PROD Environment"
    type: boolean
    default: true
  - name: DeployDR
    displayName: "Deploy to DR Environment"
    type: boolean
    default: false
  - name: Jira_URL
    type: string
    displayName: "Jira Ticket URL"
    default: ""

stages:
- stage: Prepare_And_Promote_Image
  displayName: "Prepare & Promote Artifacts"
  jobs:
  - job: PREPARE_ARTIFACTS
    displayName: "Update Chart & Promote Docker Image"
    pool:
      name: $(DEVOPS_POOL_NAME)
    steps:
      - checkout: self
        displayName: "Checkout Source Code"

      - script: |
          echo "Updating Helm chart files..."
          CHART_VERSION="1.$(Build.BuildNumber)"
          echo "Chart version: $CHART_VERSION"
          echo "Image tag: ${{ parameters.ImageTag }}"

          sed -i -e "s/^version:.*/version: $CHART_VERSION/" $(HELM_CHARTS_PATH)/charts/Chart.yaml
          sed -i -e "s/^appVersion:.*/appVersion: ${{ parameters.ImageTag }}/" $(HELM_CHARTS_PATH)/charts/Chart.yaml
          sed -i -e "s/tag:.*/tag: ${{ parameters.ImageTag }}/" $(HELM_CHARTS_PATH)/charts/prod-values.yaml
        displayName: "Update Helm Chart Metadata"

      - script: |
          set -e
          echo "--- Promoting Image from UAT to PROD ECR ---"

          echo "Assuming UAT role..."
          CREDS_UAT=$(aws sts assume-role \
            --role-arn arn:aws:iam::$SOURCE_AWS_ACCOUNT_ID:role/$SOURCE_ROLE_NAME \
            --role-session-name "UAT-Pull-$(Build.BuildNumber)")

          export AWS_ACCESS_KEY_ID=$(echo "$CREDS_UAT" | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS_UAT" | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo "$CREDS_UAT" | jq -r '.Credentials.SessionToken')
          export AWS_REGION=$SOURCE_AWS_REGION

          echo "Logging into UAT ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $SOURCE_AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          SRC_IMG="$SOURCE_AWS_ACCOUNT_ID.dkr.ecr.$SOURCE_AWS_REGION.amazonaws.com/$SOURCE_ECR_FOLDER_NAME/$SOURCE_ECR_REPO_NAME:${{ parameters.ImageTag }}"
          docker pull $SRC_IMG

          echo "Assuming PROD role..."
          CREDS_PROD=$(aws sts assume-role \
            --role-arn arn:aws:iam::$PROD_AWS_ACCOUNT_ID:role/$PROD_ROLE_NAME \
            --role-session-name "PROD-Push-$(Build.BuildNumber)")

          export AWS_ACCESS_KEY_ID=$(echo "$CREDS_PROD" | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS_PROD" | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo "$CREDS_PROD" | jq -r '.Credentials.SessionToken')
          export AWS_REGION=$PROD_AWS_REGION

          echo "Logging into PROD ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $PROD_AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          TGT_IMG="$PROD_AWS_ACCOUNT_ID.dkr.ecr.$PROD_AWS_REGION.amazonaws.com/$PROD_ECR_FOLDER_NAME/$PROD_ECR_REPO_NAME:${{ parameters.ImageTag }}"

          if ! aws ecr describe-images --repository-name $PROD_ECR_REPO_NAME --image-ids imageTag=${{ parameters.ImageTag }} --region $AWS_REGION > /dev/null 2>&1; then
            echo "Image not found in PROD ECR. Tagging and pushing..."
            docker tag $SRC_IMG $TGT_IMG
            docker push $TGT_IMG
          else
            echo "Image already exists in PROD ECR. Skipping push."
          fi
        displayName: "Promote Docker Image to PROD ECR"
      
      - task: PublishPipelineArtifact@1
        displayName: "Publish updated Helm Chart"
        inputs:
          targetPath: '$(HELM_CHARTS_PATH)/charts'
          artifactName: 'helm-chart-prod'

- stage: DeployPROD
  displayName: "Deploy to PROD"
  dependsOn: Prepare_And_Promote_Image
  condition: and(succeeded(), eq('${{ parameters.DeployPROD }}', 'true'))
  jobs:
  - deployment: DeployHelmChartPROD
    displayName: "Deploy Helm Chart to PROD"
    pool:
      name: $(PROD_POOL_NAME)
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              displayName: "Download Helm Chart artifact"
              inputs:
                artifactName: 'helm-chart-prod'
                downloadPath: '$(System.ArtifactsDirectory)/helm-chart'
            
            - script: |
                set -e
                echo "Deploying Helm chart to PROD..."

                echo "Assuming PROD role for deployment..."
                CREDS=$(aws sts assume-role \
                  --role-arn arn:aws:iam::$PROD_AWS_ACCOUNT_ID:role/$PROD_ROLE_NAME \
                  --role-session-name "PROD-Deploy-$(Build.BuildNumber)")

                export AWS_ACCESS_KEY_ID=$(echo "$CREDS" | jq -r '.Credentials.AccessKeyId')
                export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | jq -r '.Credentials.SecretAccessKey')
                export AWS_SESSION_TOKEN=$(echo "$CREDS" | jq -r '.Credentials.SessionToken')
                export AWS_REGION=$PROD_AWS_REGION

                CHART_DIR="$(System.ArtifactsDirectory)/helm-chart"
                CHART_VERSION="1.$(Build.BuildNumber)"

                helm s3 init $HELM_S3BUCKET_URL || true
                helm repo add prod-helm $HELM_S3BUCKET_URL || true

                helm package $CHART_DIR
                helm s3 push --force $SERVICE_NAME-$CHART_VERSION.tgz prod-helm

                helm repo update
                helm upgrade --install $ENV-$SERVICE_NAME prod-helm/$SERVICE_NAME \
                  --version $CHART_VERSION \
                  --namespace $NAMESPACE \
                  --kubeconfig $KUBE_CONFIG_PATH \
                  --wait --timeout 5m
              displayName: "Package, Push & Deploy Helm Chart"

            - script: |
                echo "Verifying CronJob deployment..."
                CREDS=$(aws sts assume-role \
                  --role-arn arn:aws:iam::$PROD_AWS_ACCOUNT_ID:role/$PROD_ROLE_NAME \
                  --role-session-name "PROD-Verify-$(Build.BuildNumber)")

                export AWS_ACCESS_KEY_ID=$(echo "$CREDS" | jq -r '.Credentials.AccessKeyId')
                export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | jq -r '.Credentials.SecretAccessKey')
                export AWS_SESSION_TOKEN=$(echo "$CREDS" | jq -r '.Credentials.SessionToken')
                export AWS_REGION=$PROD_AWS_REGION

                kubectl get cronjob $SERVICE_NAME -n $NAMESPACE --kubeconfig $KUBE_CONFIG_PATH
              displayName: "Verify Helm Deployment"
