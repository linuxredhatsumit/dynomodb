parameters:
  - name: DeployUAT
    type: boolean
    default: true
  - name: DeployDR
    type: boolean
    default: false
  - name: ImageTag
    type: string
    default: ''

variables:
  - name: ImageTag
    value: ${{ parameters.ImageTag }}

# =============================================
# ============== UAT SECTION ==================
# =============================================
- ${{ if eq(parameters.DeployUAT, true) }}:
  - script: |
      pwd
      sed -i -e 's/name:.*/name: $(SERVICE_NAME)/' $(HELM_CHARTS_PATH)/Chart.yaml
      sed -i -e 's/appVersion:.*/appVersion: $(ImageTag)/' $(HELM_CHARTS_PATH)/Chart.yaml
      sed -i -e 's/version:.*/version: $(ImageTag)/' $(HELM_CHARTS_PATH)/Chart.yaml
    displayName: "UAT: Update Helm Chart Metadata"
    workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

  - script: |
      # assume UAT role
      export CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::$(UAT_AWS_ACCOUNT_ID):role/$(UAT_ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber))
      export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')
      export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
      export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')

      helm s3 init $(HELM_S3BUCKET_URL)
      helm repo add uat-$(SERVICE_NAME) $(HELM_S3BUCKET_URL)
      helm package $(HELM_CHARTS_PATH)/
      helm s3 push --force $(SERVICE_NAME)-$(ImageTag).tgz uat-$(SERVICE_NAME)
    displayName: "UAT: Push Helm Chart to S3"
    workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

  - script: |
      # deploy chart to UAT
      helm repo update
      helm fetch uat-$(SERVICE_NAME)/$(SERVICE_NAME)
      tar -xvf $(SERVICE_NAME)-$(ImageTag).tgz
      helm upgrade --install uat-$(SERVICE_NAME) $(SERVICE_NAME)/ -f $(SERVICE_NAME)/uat-values.yaml --namespace $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) --wait --timeout 3m
    displayName: "UAT: Helm Deployment"
    workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

  - script: |
      echo "########## UAT STATUS ##########"
      kubectl get po -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME)
      kubectl get deployment -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME)
    displayName: "UAT: Deployment Status"

# =============================================
# ============== DR SECTION ===================
# =============================================
- ${{ if eq(parameters.DeployDR, true) }}:
  - script: |
      sed -i -e 's/name:.*/name: $(SERVICE_NAME)/' $(HELM_CHARTS_PATH)/Chart.yaml
      sed -i -e 's/appVersion:.*/appVersion: $(ImageTag)/' $(HELM_CHARTS_PATH)/Chart.yaml
      sed -i -e 's/version:.*/version: $(ImageTag)/' $(HELM_CHARTS_PATH)/Chart.yaml
    displayName: "DR: Update Helm Chart Metadata"
    workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

  - script: |
      # assume DR role
      export CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::$(DR_AWS_ACCOUNT_ID):role/$(DR_ROLE_NAME) --role-session-name $(Build.DefinitionName)-$(Build.BuildNumber))
      export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')
      export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
      export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')

      helm s3 init $(HELM_S3BUCKET_URL)
      helm repo add dr-$(SERVICE_NAME) $(HELM_S3BUCKET_URL)
      helm package $(HELM_CHARTS_PATH)/
      helm s3 push --force $(SERVICE_NAME)-$(ImageTag).tgz dr-$(SERVICE_NAME)
    displayName: "DR: Push Helm Chart to S3"
    workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

  - script: |
      helm repo update
      helm fetch dr-$(SERVICE_NAME)/$(SERVICE_NAME)
      tar -xvf $(SERVICE_NAME)-$(ImageTag).tgz
      helm upgrade --install dr-$(SERVICE_NAME) $(SERVICE_NAME)/ -f $(SERVICE_NAME)/dr-values.yaml --namespace $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) --wait --timeout 3m
    displayName: "DR: Helm Deployment"
    workingDirectory: $(System.DefaultWorkingDirectory)/$(REPOSITORY_NAME)/

  - script: |
      echo "########## DR STATUS ##########"
      kubectl get po -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME)
      kubectl get deployment -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME)
    displayName: "DR: Deployment Status"
