def update_billing_mode(dynamodb, table_name, mode, read=None, write=None, gsi_config=None, max_read_units=None, max_write_units=None):
    try:
        updated = False
        table_desc = dynamodb.describe_table(TableName=table_name)["Table"]
        current_mode = table_desc.get("BillingModeSummary", {}).get("BillingMode", "PROVISIONED")

        if mode.upper() == "PROVISIONED":
            if current_mode == "PAY_PER_REQUEST":
                logger.info("Switching table to PROVISIONED mode...", extra={"context": "update_billing_mode"})
                update_kwargs = {
                    'TableName': table_name,
                    'BillingMode': 'PROVISIONED',
                    'ProvisionedThroughput': {
                        'ReadCapacityUnits': read or 5,
                        'WriteCapacityUnits': write or 5
                    }
                }

                if gsi_config:
                    gsi_updates = []
                    for gsi_name, conf in gsi_config.items():
                        gsi_updates.append({
                            'Update': {
                                'IndexName': gsi_name,
                                'ProvisionedThroughput': {
                                    'ReadCapacityUnits': conf.get("ReadCapacityUnits", 5),
                                    'WriteCapacityUnits': conf.get("WriteCapacityUnits", 5)
                                }
                            }
                        })
                    update_kwargs["GlobalSecondaryIndexUpdates"] = gsi_updates

                dynamodb.update_table(**update_kwargs)
                updated = True
                logger.info("Table and GSIs switched to PROVISIONED.", extra={"context": "update_billing_mode"})
                wait_for_table_active(dynamodb, table_name)
            else:
                logger.info("Table already in PROVISIONED mode. Checking GSI configuration...", extra={"context": "gsi.update"})
                if gsi_config:
                    updated = update_gsi_configuration(dynamodb, table_name, gsi_config) or updated

        else:  # PAY_PER_REQUEST mode
            if current_mode == "PROVISIONED":
                logger.info("Switching table to PAY_PER_REQUEST mode...", extra={"context": "update_billing_mode"})
                update_kwargs = {
                    'TableName': table_name,
                    'BillingMode': 'PAY_PER_REQUEST'
                }
                
                # Only include OnDemandThroughput if both max_read_units and max_write_units are provided and > 0
                if max_read_units is not None and max_write_units is not None and max_read_units > 0 and max_write_units > 0:
                    update_kwargs['OnDemandThroughput'] = {
                        'MaxReadRequestUnits': max_read_units,
                        'MaxWriteRequestUnits': max_write_units
                    }
                    logger.info(json.dumps({
                        "context": "update_billing_mode",
                        "message": f"Setting maximum read request units to {max_read_units} and write request units to {max_write_units}"
                    }))
                    
                dynamodb.update_table(**update_kwargs)
                updated = True
                wait_for_table_active(dynamodb, table_name)
            else:
                # Table is already in PAY_PER_REQUEST mode - check if we need to update max units
                if max_read_units is not None and max_write_units is not None and max_read_units > 0 and max_write_units > 0:
                    logger.info("Table already in PAY_PER_REQUEST mode. Updating maximum request units...", 
                              extra={"context": "update_billing_mode"})
                    update_kwargs = {
                        'TableName': table_name,
                        'OnDemandThroughput': {
                            'MaxReadRequestUnits': max_read_units,
                            'MaxWriteRequestUnits': max_write_units
                        }
                    }
                    dynamodb.update_table(**update_kwargs)
                    updated = True
                    wait_for_table_active(dynamodb, table_name)
                else:
                    logger.info("Table already in PAY_PER_REQUEST mode. No maximum request units specified for update.", 
                              extra={"context": "update_billing_mode"})

        if not updated:
            logger.info("No updates found for table or GSIs.", extra={"context": "update_billing_mode"})
            return

        # Verify final table configuration
        final_desc = dynamodb.describe_table(TableName=table_name)["Table"]
        logger.info(json.dumps({
            "context": "table.verification",
            "message": f"Final table configuration",
            "TableName": table_name,
            "BillingMode": final_desc.get("BillingModeSummary", {}).get("BillingMode", "PROVISIONED"),
            "ReadCapacityUnits": final_desc.get("ProvisionedThroughput", {}).get("ReadCapacityUnits", 0),
            "WriteCapacityUnits": final_desc.get("ProvisionedThroughput", {}).get("WriteCapacityUnits", 0),
            "MaxReadRequestUnits": final_desc.get("OnDemandThroughput", {}).get("MaxReadRequestUnits", "Not set"),
            "MaxWriteRequestUnits": final_desc.get("OnDemandThroughput", {}).get("MaxWriteRequestUnits", "Not set")
        }))

    except ClientError as e:
        logger.error(json.dumps({"context": "update_billing_mode", "error": str(e)}))
        sys.exit(1)

def main():
    # ... [previous code remains the same until the else block] ...

    else:
        if current_mode == "PROVISIONED":
            deregister_scaling(autoscaling, args.tableName, "dynamodb:table:ReadCapacityUnits")
            deregister_scaling(autoscaling, args.tableName, "dynamodb:table:WriteCapacityUnits")
            
            # Only pass max units if both are provided and > 0
            max_read = args.maxReadUnits if args.maxReadUnits and args.maxReadUnits > 0 else None
            max_write = args.maxWriteUnits if args.maxWriteUnits and args.maxWriteUnits > 0 else None
            
            update_billing_mode(dynamodb, args.tableName, "ondemand",
                              max_read_units=max_read, 
                              max_write_units=max_write)
            wait_for_table_active(dynamodb, args.tableName)
        else:
            # Table is already in PAY_PER_REQUEST mode - update max units if specified
            max_read = args.maxReadUnits if args.maxReadUnits and args.maxReadUnits > 0 else None
            max_write = args.maxWriteUnits if args.maxWriteUnits and args.maxWriteUnits > 0 else None
            
            if max_read is not None and max_write is not None:
                logger.info("Table is already in PAY_PER_REQUEST mode. Updating maximum request units...",
                          extra={"context": "mode_check"})
                update_billing_mode(dynamodb, args.tableName, "ondemand",
                                  max_read_units=max_read,
                                  max_write_units=max_write)
            else:
                logger.info("Table already in PAY_PER_REQUEST mode. No maximum request units specified for update.", 
                          extra={"context": "mode_check"})
