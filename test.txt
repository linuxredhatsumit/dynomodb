parameters:
  - name: DeployPROD
    type: boolean
    default: true
  - name: ImageTag
    type: string
    default: ''

stages:
- ${{ if eq(parameters.DeployPROD, true) }}:
  - stage: UAT_PREP
    displayName: "UAT Prep Stage"
    pool:
      name: $(UAT_POOL_NAME)
    jobs:
      - job: PromoteAndPrepare
        displayName: "Promote Image and Push Helm Chart"
        steps:
          - checkout: self

          - script: |
              echo "Updating Helm Chart Metadata"
              VERSION_TAG="1.$(Build.BuildNumber)"
              sed -i -e "s/^version:.*/version: $VERSION_TAG/" $(HELM_CHARTS_PATH)/Chart.yaml
              sed -i -e "s/^appVersion:.*/appVersion: $VERSION_TAG/" $(HELM_CHARTS_PATH)/Chart.yaml
              sed -i -e "s/^name:.*/name: $(SERVICE_NAME)/" $(HELM_CHARTS_PATH)/Chart.yaml
              sed -i -e "s/^  tag:.*/  tag: '${{ parameters.ImageTag }}'/" $(HELM_CHARTS_PATH)/prod-values.yaml
            displayName: "Update Helm Chart Metadata"

          - script: |
              echo "Assuming UAT role to pull image"
              CREDS=$(aws sts assume-role \
                --role-arn arn:aws:iam::$(SOURCE_AWS_ACCOUNT_ID):role/$(UAT_ROLE_NAME) \
                --role-session-name "UATPull-$(Build.BuildNumber)")
              export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
              export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
              export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
              aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com
              docker pull $(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com/$(SOURCE_ECR_FOLDER_NAME)/$(SOURCE_ECR_REPO_NAME):${{ parameters.ImageTag }}
            displayName: "Pull Image from UAT ECR"

          - script: |
              echo "Assuming PROD role to push image"
              CREDS=$(aws sts assume-role \
                --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) \
                --role-session-name "PRODPush-$(Build.BuildNumber)")
              export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
              export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
              export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
              aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $(PROD_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com

              docker tag $(SOURCE_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com/$(SOURCE_ECR_FOLDER_NAME)/$(SOURCE_ECR_REPO_NAME):${{ parameters.ImageTag }} \
                        $(PROD_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com/$(PROD_ECR_FOLDER_NAME)/$(PROD_ECR_REPO_NAME):${{ parameters.ImageTag }}
              docker push $(PROD_AWS_ACCOUNT_ID).dkr.ecr.ap-south-1.amazonaws.com/$(PROD_ECR_FOLDER_NAME)/$(PROD_ECR_REPO_NAME):${{ parameters.ImageTag }}
            displayName: "Push Image to PROD ECR"

          - script: |
              echo "Push Helm Chart to S3"
              helm s3 init $(HELM_S3BUCKET_URL)
              helm repo add $(ENV)-$(SERVICE_NAME) $(HELM_S3BUCKET_URL)
              helm package $(HELM_CHARTS_PATH)
              mv $(SERVICE_NAME)-*.tgz $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz
              helm s3 push --force $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz $(ENV)-$(SERVICE_NAME)
              helm repo update
            displayName: "Package and Push Helm Chart"

  - stage: PROD_DEPLOY
    displayName: "PROD Deployment Stage"
    dependsOn: UAT_PREP
    condition: succeeded()
    pool:
      name: $(PROD_POOL_NAME)
    jobs:
      - job: DeployToPROD
        displayName: "Helm Install/Upgrade"
        steps:
          - script: |
              echo "Assuming PROD Role for Deployment"
              CREDS=$(aws sts assume-role \
                --role-arn arn:aws:iam::$(PROD_AWS_ACCOUNT_ID):role/$(PROD_ROLE_NAME) \
                --role-session-name "PRODDeploy-$(Build.BuildNumber)")
              export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
              export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
              export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')

              helm fetch $(ENV)-$(SERVICE_NAME)/$(SERVICE_NAME) --version 1.$(Build.BuildNumber)
              tar -xvf $(SERVICE_NAME)-1.$(Build.BuildNumber).tgz
              helm upgrade --install $(ENV)-$(SERVICE_NAME) $(SERVICE_NAME)/ \
                -f $(SERVICE_NAME)/prod-values.yaml \
                --namespace $(NAMESPACE) \
                --kubeconfig $(KUBE_CONFIG_PATH) \
                --wait --timeout 3m
            displayName: "Helm Upgrade or Install"

          - script: |
              echo "Verifying Deployment in PROD"
              kubectl get cronjobs -n $(NAMESPACE) --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME) || echo "CronJob not found"
              kubectl get jobs -n $(NAMESPACE) --sort-by=.metadata.creationTimestamp --kubeconfig $(KUBE_CONFIG_PATH) | grep -i $(SERVICE_NAME) | tail -5 || echo "No recent jobs found"
            displayName: "Post Deployment Status"
